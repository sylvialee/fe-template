(function(a, b) {
    typeof exports === 'object' && typeof module !== 'undefined' ? b(exports) : typeof define === 'function' && define.amd ? define(['exports'], b) : (b((a.mapv = a.mapv || {})))
}(this, (function(D) {
    'use strict';
    var E = "2.0.18";
    var F = function(a) {
        a && a.clearRect && a.clearRect(0, 0, a.canvas.width, a.canvas.height)
    };
    var G = function(a) {
        var b = window.devicePixelRatio || 1;
        a.canvas.width = a.canvas.width * b;
        a.canvas.height = a.canvas.height * b;
        a.canvas.style.width = a.canvas.width / b + 'px';
        a.canvas.style.height = a.canvas.height / b + 'px';
        a.scale(b, b)
    };

    function Event() {
        this._subscribers = {}
    }
    Event.prototype.on = function(a, b) {
        var c = this._subscribers[a];
        if (!c) {
            c = [];
            this._subscribers[a] = c
        }
        c.push({
            callback: b
        })
    };
    Event.prototype.off = function(a, b) {
        var c = this._subscribers[a];
        if (c) {
            for (var i = 0; i < c.length; i++) {
                if (c[i].callback == b) {
                    c.splice(i, 1);
                    i--
                }
            }
        }
    };
    Event.prototype._trigger = function(a, b, c) {
        if (a == '*') {
            throw new Error('Cannot trigger event *');
        }
        var d = [];
        if (a in this._subscribers) {
            d = d.concat(this._subscribers[a])
        }
        if ('*' in this._subscribers) {
            d = d.concat(this._subscribers['*'])
        }
        for (var i = 0, len = d.length; i < len; i++) {
            var e = d[i];
            if (e.callback) {
                e.callback(a, b, c || null)
            }
        }
    };
    var H = {
        municipalities: [{
            n: "北京",
            g: "116.395645,39.929986|12"
        }, {
            n: "上海",
            g: "121.487899,31.249162|12"
        }, {
            n: "天津",
            g: "117.210813,39.14393|12"
        }, {
            n: "重庆",
            g: "106.530635,29.544606|12"
        }],
        provinces: [{
            n: "安徽",
            g: "117.216005,31.859252|8",
            cities: [{
                n: "合肥",
                g: "117.282699,31.866942|12"
            }, {
                n: "安庆",
                g: "117.058739,30.537898|13"
            }, {
                n: "蚌埠",
                g: "117.35708,32.929499|13"
            }, {
                n: "亳州",
                g: "115.787928,33.871211|13"
            }, {
                n: "巢湖",
                g: "117.88049,31.608733|13"
            }, {
                n: "池州",
                g: "117.494477,30.660019|14"
            }, {
                n: "滁州",
                g: "118.32457,32.317351|13"
            }, {
                n: "阜阳",
                g: "115.820932,32.901211|13"
            }, {
                n: "淮北",
                g: "116.791447,33.960023|13"
            }, {
                n: "淮南",
                g: "117.018639,32.642812|13"
            }, {
                n: "黄山",
                g: "118.29357,29.734435|13"
            }, {
                n: "六安",
                g: "116.505253,31.755558|13"
            }, {
                n: "马鞍山",
                g: "118.515882,31.688528|13"
            }, {
                n: "宿州",
                g: "116.988692,33.636772|13"
            }, {
                n: "铜陵",
                g: "117.819429,30.94093|14"
            }, {
                n: "芜湖",
                g: "118.384108,31.36602|12"
            }, {
                n: "宣城",
                g: "118.752096,30.951642|13"
            }]
        }, {
            n: "福建",
            g: "117.984943,26.050118|8",
            cities: [{
                n: "福州",
                g: "119.330221,26.047125|12"
            }, {
                n: "龙岩",
                g: "117.017997,25.078685|13"
            }, {
                n: "南平",
                g: "118.181883,26.643626|13"
            }, {
                n: "宁德",
                g: "119.542082,26.656527|14"
            }, {
                n: "莆田",
                g: "119.077731,25.44845|13"
            }, {
                n: "泉州",
                g: "118.600362,24.901652|12"
            }, {
                n: "三明",
                g: "117.642194,26.270835|14"
            }, {
                n: "厦门",
                g: "118.103886,24.489231|12"
            }, {
                n: "漳州",
                g: "117.676205,24.517065|12"
            }]
        }, {
            n: "甘肃",
            g: "102.457625,38.103267|6",
            cities: [{
                n: "兰州",
                g: "103.823305,36.064226|12"
            }, {
                n: "白银",
                g: "104.171241,36.546682|13"
            }, {
                n: "定西",
                g: "104.626638,35.586056|13"
            }, {
                n: "甘南州",
                g: "102.917442,34.992211|14"
            }, {
                n: "嘉峪关",
                g: "98.281635,39.802397|13"
            }, {
                n: "金昌",
                g: "102.208126,38.516072|13"
            }, {
                n: "酒泉",
                g: "98.508415,39.741474|13"
            }, {
                n: "临夏州",
                g: "103.215249,35.598514|13"
            }, {
                n: "陇南",
                g: "104.934573,33.39448|14"
            }, {
                n: "平凉",
                g: "106.688911,35.55011|13"
            }, {
                n: "庆阳",
                g: "107.644227,35.726801|13"
            }, {
                n: "天水",
                g: "105.736932,34.584319|13"
            }, {
                n: "武威",
                g: "102.640147,37.933172|13"
            }, {
                n: "张掖",
                g: "100.459892,38.93932|13"
            }]
        }, {
            n: "广东",
            g: "113.394818,23.408004|8",
            cities: [{
                n: "广州",
                g: "113.30765,23.120049|12"
            }, {
                n: "潮州",
                g: "116.630076,23.661812|13"
            }, {
                n: "东莞",
                g: "113.763434,23.043024|12"
            }, {
                n: "佛山",
                g: "113.134026,23.035095|13"
            }, {
                n: "河源",
                g: "114.713721,23.757251|12"
            }, {
                n: "惠州",
                g: "114.410658,23.11354|12"
            }, {
                n: "江门",
                g: "113.078125,22.575117|13"
            }, {
                n: "揭阳",
                g: "116.379501,23.547999|13"
            }, {
                n: "茂名",
                g: "110.931245,21.668226|13"
            }, {
                n: "梅州",
                g: "116.126403,24.304571|13"
            }, {
                n: "清远",
                g: "113.040773,23.698469|13"
            }, {
                n: "汕头",
                g: "116.72865,23.383908|13"
            }, {
                n: "汕尾",
                g: "115.372924,22.778731|14"
            }, {
                n: "韶关",
                g: "113.594461,24.80296|13"
            }, {
                n: "深圳",
                g: "114.025974,22.546054|12"
            }, {
                n: "阳江",
                g: "111.97701,21.871517|14"
            }, {
                n: "云浮",
                g: "112.050946,22.937976|13"
            }, {
                n: "湛江",
                g: "110.365067,21.257463|13"
            }, {
                n: "肇庆",
                g: "112.479653,23.078663|13"
            }, {
                n: "中山",
                g: "113.42206,22.545178|12"
            }, {
                n: "珠海",
                g: "113.562447,22.256915|13"
            }]
        }, {
            n: "广西",
            g: "108.924274,23.552255|7",
            cities: [{
                n: "南宁",
                g: "108.297234,22.806493|12"
            }, {
                n: "百色",
                g: "106.631821,23.901512|13"
            }, {
                n: "北海",
                g: "109.122628,21.472718|13"
            }, {
                n: "崇左",
                g: "107.357322,22.415455|14"
            }, {
                n: "防城港",
                g: "108.351791,21.617398|15"
            }, {
                n: "桂林",
                g: "110.26092,25.262901|12"
            }, {
                n: "贵港",
                g: "109.613708,23.103373|13"
            }, {
                n: "河池",
                g: "108.069948,24.699521|14"
            }, {
                n: "贺州",
                g: "111.552594,24.411054|14"
            }, {
                n: "来宾",
                g: "109.231817,23.741166|14"
            }, {
                n: "柳州",
                g: "109.422402,24.329053|12"
            }, {
                n: "钦州",
                g: "108.638798,21.97335|13"
            }, {
                n: "梧州",
                g: "111.305472,23.485395|13"
            }, {
                n: "玉林",
                g: "110.151676,22.643974|14"
            }]
        }, {
            n: "贵州",
            g: "106.734996,26.902826|8",
            cities: [{
                n: "贵阳",
                g: "106.709177,26.629907|12"
            }, {
                n: "安顺",
                g: "105.92827,26.228595|13"
            }, {
                n: "毕节地区",
                g: "105.300492,27.302612|14"
            }, {
                n: "六盘水",
                g: "104.852087,26.591866|13"
            }, {
                n: "铜仁地区",
                g: "109.196161,27.726271|14"
            }, {
                n: "遵义",
                g: "106.93126,27.699961|13"
            }, {
                n: "黔西南州",
                g: "104.900558,25.095148|11"
            }, {
                n: "黔东南州",
                g: "107.985353,26.583992|11"
            }, {
                n: "黔南州",
                g: "107.523205,26.264536|11"
            }]
        }, {
            n: "海南",
            g: "109.733755,19.180501|9",
            cities: [{
                n: "海口",
                g: "110.330802,20.022071|13"
            }, {
                n: "白沙",
                g: "109.358586,19.216056|12"
            }, {
                n: "保亭",
                g: "109.656113,18.597592|12"
            }, {
                n: "昌江",
                g: "109.0113,19.222483|12"
            }, {
                n: "儋州",
                g: "109.413973,19.571153|13"
            }, {
                n: "澄迈",
                g: "109.996736,19.693135|13"
            }, {
                n: "东方",
                g: "108.85101,18.998161|13"
            }, {
                n: "定安",
                g: "110.32009,19.490991|13"
            }, {
                n: "琼海",
                g: "110.414359,19.21483|13"
            }, {
                n: "琼中",
                g: "109.861849,19.039771|12"
            }, {
                n: "乐东",
                g: "109.062698,18.658614|12"
            }, {
                n: "临高",
                g: "109.724101,19.805922|13"
            }, {
                n: "陵水",
                g: "109.948661,18.575985|12"
            }, {
                n: "三亚",
                g: "109.522771,18.257776|12"
            }, {
                n: "屯昌",
                g: "110.063364,19.347749|13"
            }, {
                n: "万宁",
                g: "110.292505,18.839886|13"
            }, {
                n: "文昌",
                g: "110.780909,19.750947|13"
            }, {
                n: "五指山",
                g: "109.51775,18.831306|13"
            }]
        }, {
            n: "河北",
            g: "115.661434,38.61384|7",
            cities: [{
                n: "石家庄",
                g: "114.522082,38.048958|12"
            }, {
                n: "保定",
                g: "115.49481,38.886565|13"
            }, {
                n: "沧州",
                g: "116.863806,38.297615|13"
            }, {
                n: "承德",
                g: "117.933822,40.992521|14"
            }, {
                n: "邯郸",
                g: "114.482694,36.609308|13"
            }, {
                n: "衡水",
                g: "115.686229,37.746929|13"
            }, {
                n: "廊坊",
                g: "116.703602,39.518611|13"
            }, {
                n: "秦皇岛",
                g: "119.604368,39.945462|12"
            }, {
                n: "唐山",
                g: "118.183451,39.650531|13"
            }, {
                n: "邢台",
                g: "114.520487,37.069531|13"
            }, {
                n: "张家口",
                g: "114.893782,40.811188|13"
            }]
        }, {
            n: "河南",
            g: "113.486804,34.157184|7",
            cities: [{
                n: "郑州",
                g: "113.649644,34.75661|12"
            }, {
                n: "安阳",
                g: "114.351807,36.110267|12"
            }, {
                n: "鹤壁",
                g: "114.29777,35.755426|13"
            }, {
                n: "焦作",
                g: "113.211836,35.234608|13"
            }, {
                n: "开封",
                g: "114.351642,34.801854|13"
            }, {
                n: "洛阳",
                g: "112.447525,34.657368|12"
            }, {
                n: "漯河",
                g: "114.046061,33.576279|13"
            }, {
                n: "南阳",
                g: "112.542842,33.01142|13"
            }, {
                n: "平顶山",
                g: "113.300849,33.745301|13"
            }, {
                n: "濮阳",
                g: "115.026627,35.753298|12"
            }, {
                n: "三门峡",
                g: "111.181262,34.78332|13"
            }, {
                n: "商丘",
                g: "115.641886,34.438589|13"
            }, {
                n: "新乡",
                g: "113.91269,35.307258|13"
            }, {
                n: "信阳",
                g: "114.085491,32.128582|13"
            }, {
                n: "许昌",
                g: "113.835312,34.02674|13"
            }, {
                n: "周口",
                g: "114.654102,33.623741|13"
            }, {
                n: "驻马店",
                g: "114.049154,32.983158|13"
            }]
        }, {
            n: "黑龙江",
            g: "128.047414,47.356592|6",
            cities: [{
                n: "哈尔滨",
                g: "126.657717,45.773225|12"
            }, {
                n: "大庆",
                g: "125.02184,46.596709|12"
            }, {
                n: "大兴安岭地区",
                g: "124.196104,51.991789|10"
            }, {
                n: "鹤岗",
                g: "130.292472,47.338666|13"
            }, {
                n: "黑河",
                g: "127.50083,50.25069|14"
            }, {
                n: "鸡西",
                g: "130.941767,45.32154|13"
            }, {
                n: "佳木斯",
                g: "130.284735,46.81378|12"
            }, {
                n: "牡丹江",
                g: "129.608035,44.588521|13"
            }, {
                n: "七台河",
                g: "131.019048,45.775005|14"
            }, {
                n: "齐齐哈尔",
                g: "123.987289,47.3477|13"
            }, {
                n: "双鸭山",
                g: "131.171402,46.655102|13"
            }, {
                n: "绥化",
                g: "126.989095,46.646064|13"
            }, {
                n: "伊春",
                g: "128.910766,47.734685|14"
            }]
        }, {
            n: "湖北",
            g: "112.410562,31.209316|8",
            cities: [{
                n: "武汉",
                g: "114.3162,30.581084|12"
            }, {
                n: "鄂州",
                g: "114.895594,30.384439|14"
            }, {
                n: "恩施",
                g: "109.517433,30.308978|14"
            }, {
                n: "黄冈",
                g: "114.906618,30.446109|14"
            }, {
                n: "黄石",
                g: "115.050683,30.216127|13"
            }, {
                n: "荆门",
                g: "112.21733,31.042611|13"
            }, {
                n: "荆州",
                g: "112.241866,30.332591|12"
            }, {
                n: "潜江",
                g: "112.768768,30.343116|13"
            }, {
                n: "神农架林区",
                g: "110.487231,31.595768|13"
            }, {
                n: "十堰",
                g: "110.801229,32.636994|13"
            }, {
                n: "随州",
                g: "113.379358,31.717858|13"
            }, {
                n: "天门",
                g: "113.12623,30.649047|13"
            }, {
                n: "仙桃",
                g: "113.387448,30.293966|13"
            }, {
                n: "咸宁",
                g: "114.300061,29.880657|13"
            }, {
                n: "襄阳",
                g: "112.176326,32.094934|12"
            }, {
                n: "孝感",
                g: "113.935734,30.927955|13"
            }, {
                n: "宜昌",
                g: "111.310981,30.732758|13"
            }]
        }, {
            n: "湖南",
            g: "111.720664,27.695864|7",
            cities: [{
                n: "长沙",
                g: "112.979353,28.213478|12"
            }, {
                n: "常德",
                g: "111.653718,29.012149|12"
            }, {
                n: "郴州",
                g: "113.037704,25.782264|13"
            }, {
                n: "衡阳",
                g: "112.583819,26.898164|13"
            }, {
                n: "怀化",
                g: "109.986959,27.557483|13"
            }, {
                n: "娄底",
                g: "111.996396,27.741073|13"
            }, {
                n: "邵阳",
                g: "111.461525,27.236811|13"
            }, {
                n: "湘潭",
                g: "112.935556,27.835095|13"
            }, {
                n: "湘西州",
                g: "109.745746,28.317951|14"
            }, {
                n: "益阳",
                g: "112.366547,28.588088|13"
            }, {
                n: "永州",
                g: "111.614648,26.435972|13"
            }, {
                n: "岳阳",
                g: "113.146196,29.378007|13"
            }, {
                n: "张家界",
                g: "110.48162,29.124889|13"
            }, {
                n: "株洲",
                g: "113.131695,27.827433|13"
            }]
        }, {
            n: "江苏",
            g: "119.368489,33.013797|8",
            cities: [{
                n: "南京",
                g: "118.778074,32.057236|12"
            }, {
                n: "常州",
                g: "119.981861,31.771397|12"
            }, {
                n: "淮安",
                g: "119.030186,33.606513|12"
            }, {
                n: "连云港",
                g: "119.173872,34.601549|12"
            }, {
                n: "南通",
                g: "120.873801,32.014665|12"
            }, {
                n: "苏州",
                g: "120.619907,31.317987|12"
            }, {
                n: "宿迁",
                g: "118.296893,33.95205|13"
            }, {
                n: "泰州",
                g: "119.919606,32.476053|13"
            }, {
                n: "无锡",
                g: "120.305456,31.570037|12"
            }, {
                n: "徐州",
                g: "117.188107,34.271553|12"
            }, {
                n: "盐城",
                g: "120.148872,33.379862|12"
            }, {
                n: "扬州",
                g: "119.427778,32.408505|13"
            }, {
                n: "镇江",
                g: "119.455835,32.204409|13"
            }]
        }, {
            n: "江西",
            g: "115.676082,27.757258|7",
            cities: [{
                n: "南昌",
                g: "115.893528,28.689578|12"
            }, {
                n: "抚州",
                g: "116.360919,27.954545|13"
            }, {
                n: "赣州",
                g: "114.935909,25.845296|13"
            }, {
                n: "吉安",
                g: "114.992039,27.113848|13"
            }, {
                n: "景德镇",
                g: "117.186523,29.303563|12"
            }, {
                n: "九江",
                g: "115.999848,29.71964|13"
            }, {
                n: "萍乡",
                g: "113.859917,27.639544|13"
            }, {
                n: "上饶",
                g: "117.955464,28.457623|13"
            }, {
                n: "新余",
                g: "114.947117,27.822322|13"
            }, {
                n: "宜春",
                g: "114.400039,27.81113|13"
            }, {
                n: "鹰潭",
                g: "117.03545,28.24131|13"
            }]
        }, {
            n: "吉林",
            g: "126.262876,43.678846|7",
            cities: [{
                n: "长春",
                g: "125.313642,43.898338|12"
            }, {
                n: "白城",
                g: "122.840777,45.621086|13"
            }, {
                n: "白山",
                g: "126.435798,41.945859|13"
            }, {
                n: "吉林",
                g: "126.564544,43.871988|12"
            }, {
                n: "辽源",
                g: "125.133686,42.923303|13"
            }, {
                n: "四平",
                g: "124.391382,43.175525|12"
            }, {
                n: "松原",
                g: "124.832995,45.136049|13"
            }, {
                n: "通化",
                g: "125.94265,41.736397|13"
            }, {
                n: "延边",
                g: "129.485902,42.896414|13"
            }]
        }, {
            n: "辽宁",
            g: "122.753592,41.6216|8",
            cities: [{
                n: "沈阳",
                g: "123.432791,41.808645|12"
            }, {
                n: "鞍山",
                g: "123.007763,41.118744|13"
            }, {
                n: "本溪",
                g: "123.778062,41.325838|12"
            }, {
                n: "朝阳",
                g: "120.446163,41.571828|13"
            }, {
                n: "大连",
                g: "121.593478,38.94871|12"
            }, {
                n: "丹东",
                g: "124.338543,40.129023|12"
            }, {
                n: "抚顺",
                g: "123.92982,41.877304|12"
            }, {
                n: "阜新",
                g: "121.660822,42.01925|14"
            }, {
                n: "葫芦岛",
                g: "120.860758,40.74303|13"
            }, {
                n: "锦州",
                g: "121.147749,41.130879|13"
            }, {
                n: "辽阳",
                g: "123.172451,41.273339|14"
            }, {
                n: "盘锦",
                g: "122.073228,41.141248|13"
            }, {
                n: "铁岭",
                g: "123.85485,42.299757|13"
            }, {
                n: "营口",
                g: "122.233391,40.668651|13"
            }]
        }, {
            n: "内蒙古",
            g: "114.415868,43.468238|5",
            cities: [{
                n: "呼和浩特",
                g: "111.660351,40.828319|12"
            }, {
                n: "阿拉善盟",
                g: "105.695683,38.843075|14"
            }, {
                n: "包头",
                g: "109.846239,40.647119|12"
            }, {
                n: "巴彦淖尔",
                g: "107.423807,40.76918|12"
            }, {
                n: "赤峰",
                g: "118.930761,42.297112|12"
            }, {
                n: "鄂尔多斯",
                g: "109.993706,39.81649|12"
            }, {
                n: "呼伦贝尔",
                g: "119.760822,49.201636|12"
            }, {
                n: "通辽",
                g: "122.260363,43.633756|12"
            }, {
                n: "乌海",
                g: "106.831999,39.683177|13"
            }, {
                n: "乌兰察布",
                g: "113.112846,41.022363|12"
            }, {
                n: "锡林郭勒盟",
                g: "116.02734,43.939705|11"
            }, {
                n: "兴安盟",
                g: "122.048167,46.083757|11"
            }]
        }, {
            n: "宁夏",
            g: "106.155481,37.321323|8",
            cities: [{
                n: "银川",
                g: "106.206479,38.502621|12"
            }, {
                n: "固原",
                g: "106.285268,36.021523|13"
            }, {
                n: "石嘴山",
                g: "106.379337,39.020223|13"
            }, {
                n: "吴忠",
                g: "106.208254,37.993561|14"
            }, {
                n: "中卫",
                g: "105.196754,37.521124|14"
            }]
        }, {
            n: "青海",
            g: "96.202544,35.499761|7",
            cities: [{
                n: "西宁",
                g: "101.767921,36.640739|12"
            }, {
                n: "果洛州",
                g: "100.223723,34.480485|11"
            }, {
                n: "海东地区",
                g: "102.085207,36.51761|11"
            }, {
                n: "海北州",
                g: "100.879802,36.960654|11"
            }, {
                n: "海南州",
                g: "100.624066,36.284364|11"
            }, {
                n: "海西州",
                g: "97.342625,37.373799|11"
            }, {
                n: "黄南州",
                g: "102.0076,35.522852|11"
            }, {
                n: "玉树州",
                g: "97.013316,33.00624|14"
            }]
        }, {
            n: "山东",
            g: "118.527663,36.09929|8",
            cities: [{
                n: "济南",
                g: "117.024967,36.682785|12"
            }, {
                n: "滨州",
                g: "117.968292,37.405314|12"
            }, {
                n: "东营",
                g: "118.583926,37.487121|12"
            }, {
                n: "德州",
                g: "116.328161,37.460826|12"
            }, {
                n: "菏泽",
                g: "115.46336,35.26244|13"
            }, {
                n: "济宁",
                g: "116.600798,35.402122|13"
            }, {
                n: "莱芜",
                g: "117.684667,36.233654|13"
            }, {
                n: "聊城",
                g: "115.986869,36.455829|12"
            }, {
                n: "临沂",
                g: "118.340768,35.072409|12"
            }, {
                n: "青岛",
                g: "120.384428,36.105215|12"
            }, {
                n: "日照",
                g: "119.50718,35.420225|12"
            }, {
                n: "泰安",
                g: "117.089415,36.188078|13"
            }, {
                n: "威海",
                g: "122.093958,37.528787|13"
            }, {
                n: "潍坊",
                g: "119.142634,36.716115|12"
            }, {
                n: "烟台",
                g: "121.309555,37.536562|12"
            }, {
                n: "枣庄",
                g: "117.279305,34.807883|13"
            }, {
                n: "淄博",
                g: "118.059134,36.804685|12"
            }]
        }, {
            n: "山西",
            g: "112.515496,37.866566|7",
            cities: [{
                n: "太原",
                g: "112.550864,37.890277|12"
            }, {
                n: "长治",
                g: "113.120292,36.201664|12"
            }, {
                n: "大同",
                g: "113.290509,40.113744|12"
            }, {
                n: "晋城",
                g: "112.867333,35.499834|13"
            }, {
                n: "晋中",
                g: "112.738514,37.693362|13"
            }, {
                n: "临汾",
                g: "111.538788,36.099745|13"
            }, {
                n: "吕梁",
                g: "111.143157,37.527316|14"
            }, {
                n: "朔州",
                g: "112.479928,39.337672|13"
            }, {
                n: "忻州",
                g: "112.727939,38.461031|12"
            }, {
                n: "阳泉",
                g: "113.569238,37.869529|13"
            }, {
                n: "运城",
                g: "111.006854,35.038859|13"
            }]
        }, {
            n: "陕西",
            g: "109.503789,35.860026|7",
            cities: [{
                n: "西安",
                g: "108.953098,34.2778|12"
            }, {
                n: "安康",
                g: "109.038045,32.70437|13"
            }, {
                n: "宝鸡",
                g: "107.170645,34.364081|12"
            }, {
                n: "汉中",
                g: "107.045478,33.081569|13"
            }, {
                n: "商洛",
                g: "109.934208,33.873907|13"
            }, {
                n: "铜川",
                g: "108.968067,34.908368|13"
            }, {
                n: "渭南",
                g: "109.483933,34.502358|13"
            }, {
                n: "咸阳",
                g: "108.707509,34.345373|13"
            }, {
                n: "延安",
                g: "109.50051,36.60332|13"
            }, {
                n: "榆林",
                g: "109.745926,38.279439|12"
            }]
        }, {
            n: "四川",
            g: "102.89916,30.367481|7",
            cities: [{
                n: "成都",
                g: "104.067923,30.679943|12"
            }, {
                n: "阿坝州",
                g: "102.228565,31.905763|15"
            }, {
                n: "巴中",
                g: "106.757916,31.869189|14"
            }, {
                n: "达州",
                g: "107.494973,31.214199|14"
            }, {
                n: "德阳",
                g: "104.402398,31.13114|13"
            }, {
                n: "甘孜州",
                g: "101.969232,30.055144|15"
            }, {
                n: "广安",
                g: "106.63572,30.463984|13"
            }, {
                n: "广元",
                g: "105.819687,32.44104|13"
            }, {
                n: "乐山",
                g: "103.760824,29.600958|13"
            }, {
                n: "凉山州",
                g: "102.259591,27.892393|14"
            }, {
                n: "泸州",
                g: "105.44397,28.89593|14"
            }, {
                n: "南充",
                g: "106.105554,30.800965|13"
            }, {
                n: "眉山",
                g: "103.84143,30.061115|13"
            }, {
                n: "绵阳",
                g: "104.705519,31.504701|12"
            }, {
                n: "内江",
                g: "105.073056,29.599462|13"
            }, {
                n: "攀枝花",
                g: "101.722423,26.587571|14"
            }, {
                n: "遂宁",
                g: "105.564888,30.557491|12"
            }, {
                n: "雅安",
                g: "103.009356,29.999716|13"
            }, {
                n: "宜宾",
                g: "104.633019,28.769675|13"
            }, {
                n: "资阳",
                g: "104.63593,30.132191|13"
            }, {
                n: "自贡",
                g: "104.776071,29.359157|13"
            }]
        }, {
            n: "西藏",
            g: "89.137982,31.367315|6",
            cities: [{
                n: "拉萨",
                g: "91.111891,29.662557|13"
            }, {
                n: "阿里地区",
                g: "81.107669,30.404557|11"
            }, {
                n: "昌都地区",
                g: "97.185582,31.140576|15"
            }, {
                n: "林芝地区",
                g: "94.349985,29.666941|11"
            }, {
                n: "那曲地区",
                g: "92.067018,31.48068|14"
            }, {
                n: "日喀则地区",
                g: "88.891486,29.269023|14"
            }, {
                n: "山南地区",
                g: "91.750644,29.229027|11"
            }]
        }, {
            n: "新疆",
            g: "85.614899,42.127001|6",
            cities: [{
                n: "乌鲁木齐",
                g: "87.564988,43.84038|12"
            }, {
                n: "阿拉尔",
                g: "81.291737,40.61568|13"
            }, {
                n: "阿克苏地区",
                g: "80.269846,41.171731|12"
            }, {
                n: "阿勒泰地区",
                g: "88.137915,47.839744|13"
            }, {
                n: "巴音郭楞",
                g: "86.121688,41.771362|12"
            }, {
                n: "博尔塔拉州",
                g: "82.052436,44.913651|11"
            }, {
                n: "昌吉州",
                g: "87.296038,44.007058|13"
            }, {
                n: "哈密地区",
                g: "93.528355,42.858596|13"
            }, {
                n: "和田地区",
                g: "79.930239,37.116774|13"
            }, {
                n: "喀什地区",
                g: "75.992973,39.470627|12"
            }, {
                n: "克拉玛依",
                g: "84.88118,45.594331|13"
            }, {
                n: "克孜勒苏州",
                g: "76.137564,39.750346|11"
            }, {
                n: "石河子",
                g: "86.041865,44.308259|13"
            }, {
                n: "塔城地区",
                g: "82.974881,46.758684|12"
            }, {
                n: "图木舒克",
                g: "79.198155,39.889223|13"
            }, {
                n: "吐鲁番地区",
                g: "89.181595,42.96047|13"
            }, {
                n: "五家渠",
                g: "87.565449,44.368899|13"
            }, {
                n: "伊犁州",
                g: "81.297854,43.922248|11"
            }]
        }, {
            n: "云南",
            g: "101.592952,24.864213|7",
            cities: [{
                n: "昆明",
                g: "102.714601,25.049153|12"
            }, {
                n: "保山",
                g: "99.177996,25.120489|13"
            }, {
                n: "楚雄州",
                g: "101.529382,25.066356|13"
            }, {
                n: "大理州",
                g: "100.223675,25.5969|14"
            }, {
                n: "德宏州",
                g: "98.589434,24.44124|14"
            }, {
                n: "迪庆州",
                g: "99.713682,27.831029|14"
            }, {
                n: "红河州",
                g: "103.384065,23.367718|11"
            }, {
                n: "丽江",
                g: "100.229628,26.875351|13"
            }, {
                n: "临沧",
                g: "100.092613,23.887806|14"
            }, {
                n: "怒江州",
                g: "98.859932,25.860677|14"
            }, {
                n: "普洱",
                g: "100.980058,22.788778|14"
            }, {
                n: "曲靖",
                g: "103.782539,25.520758|12"
            }, {
                n: "昭通",
                g: "103.725021,27.340633|13"
            }, {
                n: "文山",
                g: "104.089112,23.401781|14"
            }, {
                n: "西双版纳",
                g: "100.803038,22.009433|13"
            }, {
                n: "玉溪",
                g: "102.545068,24.370447|13"
            }]
        }, {
            n: "浙江",
            g: "119.957202,29.159494|8",
            cities: [{
                n: "杭州",
                g: "120.219375,30.259244|12"
            }, {
                n: "湖州",
                g: "120.137243,30.877925|12"
            }, {
                n: "嘉兴",
                g: "120.760428,30.773992|13"
            }, {
                n: "金华",
                g: "119.652576,29.102899|12"
            }, {
                n: "丽水",
                g: "119.929576,28.4563|13"
            }, {
                n: "宁波",
                g: "121.579006,29.885259|12"
            }, {
                n: "衢州",
                g: "118.875842,28.95691|12"
            }, {
                n: "绍兴",
                g: "120.592467,30.002365|13"
            }, {
                n: "台州",
                g: "121.440613,28.668283|13"
            }, {
                n: "温州",
                g: "120.690635,28.002838|12"
            }, {
                n: "舟山",
                g: "122.169872,30.03601|13"
            }]
        }],
        other: [{
            n: "香港",
            g: "114.186124,22.293586|11"
        }, {
            n: "澳门",
            g: "113.557519,22.204118|13"
        }, {
            n: "台湾",
            g: "120.961454,23.80406|8"
        }]
    };

    function getCenter(g) {
        var a = g.split("|");
        a[0] = a[0].split(",");
        return {
            lng: parseFloat(a[0][0]),
            lat: parseFloat(a[0][1])
        }
    }
    var J = {
        getProvinceNameByCityName: function(a) {
            var b = H.provinces;
            for (var i = 0; i < b.length; i++) {
                var c = b[i].n;
                var d = b[i].cities;
                for (var j = 0; j < d.length; j++) {
                    if (d[j].n == a) {
                        return c
                    }
                }
            }
            return null
        },
        getCenterByCityName: function(a) {
            a = a.replace('市', '');
            for (var i = 0; i < H.municipalities.length; i++) {
                if (H.municipalities[i].n == a) {
                    return getCenter(H.municipalities[i].g)
                }
            }
            for (var i = 0; i < H.other.length; i++) {
                if (H.other[i].n == a) {
                    return getCenter(H.other[i].g)
                }
            }
            var b = H.provinces;
            for (var i = 0; i < b.length; i++) {
                if (b[i].n == a) {
                    return getCenter(b[i].g)
                }
                var c = b[i].cities;
                for (var j = 0; j < c.length; j++) {
                    if (c[j].n == a) {
                        return getCenter(c[j].g)
                    }
                }
            }
            return null
        }
    };

    function DataSet(a, b) {
        Event.bind(this)();
        this._options = b || {};
        this._data = [];
        if (a) {
            this.add(a)
        }
    }
    DataSet.prototype = Event.prototype;
    DataSet.prototype.add = function(a, b) {
        if (Array.isArray(a)) {
            for (var i = 0, len = a.length; i < len; i++) {
                if (a[i].time && a[i].time.length == 14 && a[i].time.substr(0, 2) == '20') {
                    var c = a[i].time;
                    a[i].time = new Date(c.substr(0, 4) + '-' + c.substr(4, 2) + '-' + c.substr(6, 2) + ' ' + c.substr(8, 2) + ':' + c.substr(10, 2) + ':' + c.substr(12, 2)).getTime()
                }
                this._data.push(a[i])
            }
        } else if (a instanceof Object) {
            this._data.push(a)
        } else {
            throw new Error('Unknown dataType');
        }
        this._dataCache = JSON.parse(JSON.stringify(this._data))
    };
    DataSet.prototype.reset = function() {
        this._data = JSON.parse(JSON.stringify(this._dataCache))
    };
    DataSet.prototype.get = function(a) {
        a = a || {};
        var b = new Date();
        var c = this._data;
        var b = new Date();
        if (a.filter) {
            var d = [];
            for (var i = 0; i < c.length; i++) {
                if (a.filter(c[i])) {
                    d.push(c[i])
                }
            }
            c = d
        }
        if (a.transferCoordinate) {
            c = this.transferCoordinate(c, a.transferCoordinate, a.fromColumn, a.toColumn)
        }
        return c
    };
    DataSet.prototype.set = function(a) {
        this._set(a);
        this._trigger('change')
    };
    DataSet.prototype._set = function(a) {
        this.clear();
        this.add(a)
    };
    DataSet.prototype.clear = function(a) {
        this._data = []
    };
    DataSet.prototype.remove = function(a) {};
    DataSet.prototype.update = function(a, b) {
        var c = this._data;
        var d = null;
        for (var i = 0; i < c.length; i++) {
            if (b) {
                var e = true;
                for (var f in b) {
                    if (c[i][f] != b[f]) {
                        e = false
                    }
                }
                if (e) {
                    a && a(c[i])
                }
            } else {
                a && a(c[i])
            }
        }
        this._dataCache = JSON.parse(JSON.stringify(this._data));
        this._trigger('change')
    };
    DataSet.prototype.transferCoordinate = function(f, g, h, k) {
        k = k || '_coordinates';
        h = h || 'coordinates';
        for (var i = 0; i < f.length; i++) {
            var l = f[i].geometry;
            var m = l[h];
            switch (l.type) {
                case 'Point':
                    l[k] = g(m);
                    break;
                case 'LineString':
                    var n = [];
                    for (var j = 0; j < m.length; j++) {
                        n.push(g(m[j]))
                    }
                    l[k] = n;
                    break;
                case 'Polygon':
                    var n = getPolygon(m);
                    l[k] = n;
                    break;
                case 'MultiPolygon':
                    var n = [];
                    for (var c = 0; c < m.length; c++) {
                        var o = m[c];
                        var o = getPolygon(o);
                        n.push(o)
                    }
                    l[k] = n;
                    break
            }
        }
        function getPolygon(a) {
            var b = [];
            for (var c = 0; c < a.length; c++) {
                var d = a[c];
                var e = [];
                for (var j = 0; j < d.length; j++) {
                    e.push(g(d[j]))
                }
                b.push(e)
            }
            return b
        }
        return f
    };
    DataSet.prototype.initGeometry = function(c) {
        if (c) {
            this._data.forEach(function(a) {
                a.geometry = c(a)
            })
        } else {
            this._data.forEach(function(a) {
                if (!a.geometry) {
                    if (a.lng && a.lat) {
                        a.geometry = {
                            type: 'Point',
                            coordinates: [a.lng, a.lat]
                        }
                    } else if (a.city) {
                        var b = J.getCenterByCityName(a.city);
                        if (b) {
                            a.geometry = {
                                type: 'Point',
                                coordinates: [b.lng, b.lat]
                            }
                        }
                    }
                }
            })
        }
    };
    DataSet.prototype.getMax = function(a) {
        var b = this._data;
        if (!b || b.length <= 0) {
            return
        }
        var c = parseFloat(b[0][a]);
        for (var i = 1; i < b.length; i++) {
            var d = parseFloat(b[i][a]);
            if (d > c) {
                c = d
            }
        }
        return c
    };
    DataSet.prototype.getSum = function(a) {
        var b = this._data;
        if (!b || b.length <= 0) {
            return
        }
        var c = 0;
        for (var i = 0; i < b.length; i++) {
            if (b[i][a]) {
                c += parseFloat(b[i][a])
            }
        }
        return c
    };
    DataSet.prototype.getMin = function(a) {
        var b = this._data;
        if (!b || b.length <= 0) {
            return
        }
        var c = parseFloat(b[0][a]);
        for (var i = 1; i < b.length; i++) {
            var d = parseFloat(b[i][a]);
            if (d < c) {
                c = d
            }
        }
        return c
    };
    DataSet.prototype.getUnique = function(a) {
        var b = this._data;
        if (!b || b.length <= 0) {
            return
        }
        var c = {};
        for (var i = 1; i < b.length; i++) {
            c[b[i][a]] = true
        }
        var b = [];
        for (var d in c) {
            b.push(d)
        }
        return b
    };

    function hex_corner(a, b, i) {
        var c = 60 * i + 30;
        var d = Math.PI / 180 * c;
        return [a.x + b * Math.cos(d), a.y + b * Math.sin(d)]
    }
    function bq(a, x, y, b) {
        for (var j = 0; j < 6; j++) {
            var c = hex_corner({
                x: x,
                y: y
            }, b, j);
            a.lineTo(c[0], c[1])
        }
    }
    var M = {
        drawDataSet: function(a, b, c) {
            var d = b instanceof DataSet ? b.get() : b;
            for (var i = 0, len = d.length; i < len; i++) {
                var e = d[i];
                this.draw(a, e, c)
            }
        },
        draw: function(a, b, c) {
            var d = b.geometry.type;
            var e = b.geometry._coordinates || b.geometry.coordinates;
            var f = c.symbol || 'circle';
            switch (d) {
                case 'Point':
                    var g = b._size || b.size || c._size || c.size || 5;
                    if (f === 'circle') {
                        if (c.bigData === 'Point') {
                            a.moveTo(e[0], e[1])
                        }
                        a.arc(e[0], e[1], g, 0, Math.PI * 2)
                    } else if (f === 'rect') {
                        a.rect(e[0] - g / 2, e[1] - g / 2, g, g)
                    } else if (f === 'honeycomb') {
                        bq(a, e[0], e[1], g)
                    }
                    break;
                case 'LineString':
                    for (var j = 0; j < e.length; j++) {
                        var x = e[j][0];
                        var y = e[j][1];
                        if (j == 0) {
                            a.moveTo(x, y)
                        } else {
                            a.lineTo(x, y)
                        }
                    }
                    break;
                case 'Polygon':
                    this.drawPolygon(a, e);
                    break;
                case 'MultiPolygon':
                    for (var i = 0; i < e.length; i++) {
                        var h = e[i];
                        this.drawPolygon(a, h)
                    }
                    a.closePath();
                    break;
                default:
                    console.log('type' + d + 'is not support now!');
                    break
            }
        },
        drawPolygon: function(a, b) {
            for (var i = 0; i < b.length; i++) {
                var c = b[i];
                a.moveTo(c[0][0], c[0][1]);
                for (var j = 1; j < c.length; j++) {
                    a.lineTo(c[j][0], c[j][1])
                }
                a.lineTo(c[0][0], c[0][1])
            }
        }
    };
    var N = {
        draw: function(a, b, c) {
            var d = b instanceof DataSet ? b.get() : b;
            a.save();
            for (var e in c) {
                a[e] = c[e]
            }
            if (c.bigData) {
                a.save();
                a.beginPath();
                for (var i = 0, len = d.length; i < len; i++) {
                    var f = d[i];
                    M.draw(a, f, c)
                }
                var g = c.bigData;
                if (g == 'Point' || g == 'Polygon' || g == 'MultiPolygon') {
                    a.fill();
                    if ((f.strokeStyle || c.strokeStyle) && c.lineWidth) {
                        a.stroke()
                    }
                } else if (g == 'LineString') {
                    a.stroke()
                }
                a.restore()
            } else {
                for (var i = 0, len = d.length; i < len; i++) {
                    var f = d[i];
                    a.save();
                    if (f.fillStyle || f._fillStyle) {
                        a.fillStyle = f.fillStyle || f._fillStyle
                    }
                    if (f.strokeStyle || f._strokeStyle) {
                        a.strokeStyle = f.strokeStyle || f._strokeStyle
                    }
                    var g = f.geometry.type;
                    a.beginPath();
                    M.draw(a, f, c);
                    if (g == 'Point' || g == 'Polygon' || g == 'MultiPolygon') {
                        a.fill();
                        if ((f.strokeStyle || c.strokeStyle) && c.lineWidth) {
                            a.stroke()
                        }
                    } else if (g == 'LineString') {
                        if (f.lineWidth || f._lineWidth) {
                            a.lineWidth = f.lineWidth || f._lineWidth
                        }
                        a.stroke()
                    }
                    a.restore()
                }
            }
            a.restore()
        }
    };

    function Canvas(a, b) {
        var c;
        if (typeof document === 'undefined') {} else {
            var c = document.createElement('canvas');
            if (a) {
                c.width = a
            }
            if (b) {
                c.height = b
            }
        }
        return c
    }
    function Intensity(a) {
        a = a || {};
        this.gradient = a.gradient || {
                0.25: "rgba(0, 0, 255, 1)",
                0.55: "rgba(0, 255, 0, 1)",
                0.85: "rgba(255, 255, 0, 1)",
                1.0: "rgba(255, 0, 0, 1)"
            };
        this.maxSize = a.maxSize || 35;
        this.minSize = a.minSize || 0;
        this.max = a.max || 100;
        this.min = a.min || 0;
        this.initPalette()
    }
    Intensity.prototype.setMax = function(a) {
        this.max = a || 100
    };
    Intensity.prototype.setMin = function(a) {
        this.min = a || 0
    };
    Intensity.prototype.setMaxSize = function(a) {
        this.maxSize = a || 35
    };
    Intensity.prototype.setMinSize = function(a) {
        this.minSize = a || 0
    };
    Intensity.prototype.initPalette = function() {
        var a = this.gradient;
        var b = new Canvas(256, 1);
        var c = this.paletteCtx = b.getContext('2d');
        var d = c.createLinearGradient(0, 0, 256, 1);
        for (var e in a) {
            d.addColorStop(parseFloat(e), a[e])
        }
        c.fillStyle = d;
        c.fillRect(0, 0, 256, 1)
    };
    Intensity.prototype.getColor = function(a) {
        var b = this.getImageData(a);
        return "rgba(" + b[0] + ", " + b[1] + ", " + b[2] + ", " + b[3] / 256 + ")"
    };
    Intensity.prototype.getImageData = function(a) {
        var b = this.paletteCtx.getImageData(0, 0, 256, 1).data;
        if (a === undefined) {
            return b
        }
        var c = this.max;
        var d = this.min;
        if (a > c) {
            a = c
        }
        if (a < d) {
            a = d
        }
        var e = Math.floor((a - d) / (c - d) * (256 - 1)) * 4;
        return [b[e], b[e + 1], b[e + 2], b[e + 3]]
    };
    Intensity.prototype.getSize = function(a) {
        var b = 0;
        var c = this.max;
        var d = this.min;
        var e = this.maxSize;
        var f = this.minSize;
        if (a > c) {
            a = c
        }
        if (a < d) {
            a = d
        }
        b = f + (a - d) / (c - d) * (e - f);
        return b
    };
    Intensity.prototype.getLegend = function(a) {
        var b = this.gradient;
        var c = a.width || 20;
        var d = a.height || 180;
        var e = new Canvas(c, d);
        var f = e.getContext('2d');
        var g = f.createLinearGradient(0, d, 0, 0);
        for (var h in b) {
            g.addColorStop(parseFloat(h), b[h])
        }
        f.fillStyle = g;
        f.fillRect(0, 0, c, d);
        return e
    };
    var O = typeof window === 'undefined' ? {} : window;
    var R = O.devicePixelRatio || 1;

    function createCircle(a) {
        var b = a / 2;
        var c = a + b;
        var d = 10000;
        var e = new Canvas(c * 2, c * 2);
        var f = e.getContext('2d');
        f.shadowBlur = b;
        f.shadowColor = 'black';
        f.shadowOffsetX = f.shadowOffsetY = d;
        f.beginPath();
        f.arc(c - d, c - d, a, 0, Math.PI * 2, true);
        f.closePath();
        f.fill();
        return e
    }
    function colorize(a, b, c) {
        var d = c.maxOpacity || 0.8;
        for (var i = 3, len = a.length, j; i < len; i += 4) {
            j = a[i] * 4;
            if (a[i] / 256 > d) {
                a[i] = 256 * d
            }
            a[i - 3] = b[j];
            a[i - 2] = b[j + 1];
            a[i - 1] = b[j + 2]
        }
    }
    function drawGray(f, g, h) {
        var j = h.max || 100;
        var k = h.min || 0;
        var l = h._size;
        if (l == undefined) {
            l = h.size;
            if (l == undefined) {
                l = 13
            }
        }
        var m = new Intensity({
            gradient: h.gradient,
            max: j,
            min: k
        });
        var n = createCircle(l);
        var o = n.width / 2;
        var p = n.height / 2;
        var q = g;
        var r = {};
        q.forEach(function(a, b) {
            var c = a.count === undefined ? 1 : a.count;
            var d = Math.min(1, c / j).toFixed(2);
            r[d] = r[d] || [];
            r[d].push(a)
        });
        for (var i in r) {
            if (isNaN(i)) continue;
            var s = r[i];
            f.beginPath();
            if (!h.withoutAlpha) {
                f.globalAlpha = i
            }
            f.strokeStyle = m.getColor(i * j);
            s.forEach(function(a, b) {
                if (!a.geometry) {
                    return
                }
                var c = a.geometry._coordinates || a.geometry.coordinates;
                var d = a.geometry.type;
                if (d === 'Point') {
                    var e = a.count === undefined ? 1 : a.count;
                    f.globalAlpha = e / j;
                    f.drawImage(n, c[0] - o, c[1] - p)
                } else if (d === 'LineString') {
                    var e = a.count === undefined ? 1 : a.count;
                    f.globalAlpha = e / j;
                    f.beginPath();
                    M.draw(f, a, h);
                    f.stroke()
                } else if (d === 'Polygon') {}
            })
        }
    }
    function draw$1(a, b, c) {
        if (a.canvas.width <= 0 || a.canvas.height <= 0) {
            return
        }
        var d = c.strength || 0.3;
        a.strokeStyle = 'rgba(0,0,0,' + d + ')';
        var e = new Canvas(a.canvas.width, a.canvas.height);
        var f = e.getContext('2d');
        f.scale(R, R);
        c = c || {};
        var g = b instanceof DataSet ? b.get() : b;
        a.save();
        var h = new Intensity({
            gradient: c.gradient
        });
        drawGray(f, g, c);
        if (!c.absolute) {
            var i = f.getImageData(0, 0, a.canvas.width, a.canvas.height);
            colorize(i.data, h.getImageData(), c);
            a.putImageData(i, 0, 0);
            a.restore()
        }
        h = null;
        e = null
    }
    var T = {
        draw: draw$1
    };
    var U = {
        draw: function(a, b, c) {
            a.save();
            var d = b instanceof DataSet ? b.get() : b;
            var e = {};
            var f = c._size || c.size || 50;
            var g = c.offset || {
                    x: 0,
                    y: 0
                };
            for (var i = 0; i < d.length; i++) {
                var h = d[i].geometry._coordinates || d[i].geometry.coordinates;
                var j = Math.floor((h[0] - g.x) / f) + "," + Math.floor((h[1] - g.y) / f);
                if (!e[j]) {
                    e[j] = 0
                }
                e[j] += ~~ (d[i].count || 1)
            }
            var k = new Intensity({
                max: c.max || 100,
                gradient: c.gradient
            });
            for (var j in e) {
                j = j.split(",");
                a.beginPath();
                a.rect(j[0] * f + .5 + g.x, j[1] * f + .5 + g.y, f, f);
                a.fillStyle = k.getColor(e[j]);
                a.fill();
                if (c.strokeStyle && c.lineWidth) {
                    a.stroke()
                }
            }
            if (c.label && c.label.show !== false) {
                a.fillStyle = c.label.fillStyle || 'white';
                if (c.label.font) {
                    a.font = c.label.font
                }
                if (c.label.shadowColor) {
                    a.shadowColor = c.label.shadowColor
                }
                if (c.label.shadowBlur) {
                    a.shadowBlur = c.label.shadowBlur
                }
                for (var j in e) {
                    j = j.split(",");
                    var l = e[j];
                    var m = a.measureText(l).width;
                    a.fillText(l, j[0] * f + .5 + g.x + f / 2 - m / 2, j[1] * f + .5 + g.y + f / 2 + 5)
                }
            }
            a.restore()
        }
    };

    function hex_corner$1(a, b, i) {
        var c = 60 * i + 30;
        var d = Math.PI / 180 * c;
        return [a.x + b * Math.cos(d), a.y + b * Math.sin(d)]
    }
    var V = {
        draw: function(a, b, c) {
            a.save();
            var d = b instanceof DataSet ? b.get() : b;
            for (var e in c) {
                a[e] = c[e]
            }
            var f = {};
            var g = c.offset || {
                    x: 10,
                    y: 10
                };
            var r = c._size || c.size || 40;
            r = r / 2 / Math.sin(Math.PI / 3);
            var h = r * 2 * Math.sin(Math.PI / 3);
            var k = r * 1.5;
            var l = {};
            for (var i = 0; i < d.length; i++) {
                var m = d[i].geometry._coordinates || d[i].geometry.coordinates;
                var n = (m[1] - g.y) / k,
                    pj = Math.round(n),
                    px = (m[0] - g.x) / h - (pj & 1 ? .5 : 0),
                    pi = Math.round(px),
                    py1 = n - pj;
                if (Math.abs(py1) * 3 > 1) {
                    var o = px - pi,
                        pi2 = pi + (px < pi ? -1 : 1) / 2,
                        pj2 = pj + (n < pj ? -1 : 1),
                        px2 = px - pi2,
                        py2 = n - pj2;
                    if (o * o + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2
                }
                var p = pi + "-" + pj,
                    bin = l[p];
                if (bin) {
                    bin.push(d[i])
                } else {
                    bin = l[p] = [d[i]];
                    bin.i = pi;
                    bin.j = pj;
                    bin.x = (pi + (pj & 1 ? 1 / 2 : 0)) * h;
                    bin.y = pj * k
                }
            }
            var q = new Intensity({
                max: c.max || 100,
                maxSize: r,
                gradient: c.gradient
            });
            for (var e in l) {
                var s = l[e];
                a.beginPath();
                for (var j = 0; j < 6; j++) {
                    var t = hex_corner$1({
                        x: s.x + g.x,
                        y: s.y + g.y
                    }, r, j);
                    a.lineTo(t[0], t[1])
                }
                a.closePath();
                var u = 0;
                for (var i = 0; i < s.length; i++) {
                    u += s[i].count || 1
                }
                s.count = u;
                a.fillStyle = q.getColor(u);
                a.fill();
                if (c.strokeStyle && c.lineWidth) {
                    a.stroke()
                }
            }
            if (c.label && c.label.show !== false) {
                a.fillStyle = c.label.fillStyle || 'white';
                if (c.label.font) {
                    a.font = c.label.font
                }
                if (c.label.shadowColor) {
                    a.shadowColor = c.label.shadowColor
                }
                if (c.label.shadowBlur) {
                    a.shadowBlur = c.label.shadowBlur
                }
                for (var e in l) {
                    var s = l[e];
                    var v = s.count;
                    if (v < 0) {
                        v = v.toFixed(2)
                    } else {
                        v = ~~v
                    }
                    var w = a.measureText(v).width;
                    a.fillText(v, s.x + g.x - w / 2, s.y + g.y + 5)
                }
            }
            a.restore()
        }
    };

    function createShader(a, b, c) {
        var d = a.createShader(c);
        a.shaderSource(d, b);
        a.compileShader(d);
        return d
    }
    function initShaders(a, b, c) {
        var d = createShader(a, b, a.VERTEX_SHADER);
        var e = createShader(a, c, a.FRAGMENT_SHADER);
        var f = a.createProgram();
        a.attachShader(f, d);
        a.attachShader(f, e);
        a.linkProgram(f);
        a.useProgram(f);
        return f
    }
    function getColorData(a) {
        var b = document.createElement('canvas');
        var c = b.getContext('2d');
        b.width = 1;
        b.height = 1;
        c.fillStyle = a;
        c.fillRect(0, 0, 1, 1);
        return c.getImageData(0, 0, 1, 1).data
    }
    var W = ['attribute vec4 a_Position;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = 30.0;', '}'].join('');
    var X = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');

    function draw$2(a, b, c) {
        if (!b) {
            return
        }
        var d = initShaders(a, W, X);
        a.enable(a.BLEND);
        a.blendFunc(a.SRC_ALPHA, a.ONE);
        a.clear(a.COLOR_BUFFER_BIT);
        var e = a.canvas.width / 2;
        var f = a.canvas.height / 2;
        var g = a.createBuffer();
        a.bindBuffer(a.ARRAY_BUFFER, g);
        var h = a.getAttribLocation(d, 'a_Position');
        a.vertexAttribPointer(h, 2, a.FLOAT, false, 0, 0);
        a.enableVertexAttribArray(h);
        var k = a.getUniformLocation(d, 'u_FragColor');
        var l = getColorData(c.strokeStyle || 'red');
        a.uniform4f(k, l[0] / 255, l[1] / 255, l[2] / 255, l[3] / 255);
        a.lineWidth(c.lineWidth || 1);
        for (var i = 0, len = b.length; i < len; i++) {
            var m = b[i].geometry._coordinates;
            var n = [];
            for (var j = 0; j < m.length; j++) {
                var o = m[j];
                var x = (o[0] - e) / e;
                var y = (f - o[1]) / f;
                n.push(x, y)
            }
            var p = new Float32Array(n);
            a.bufferData(a.ARRAY_BUFFER, p, a.STATIC_DRAW);
            a.drawArrays(a.LINE_STRIP, 0, m.length)
        }
    }
    var Y = {
        draw: draw$2
    };
    var Z = ['attribute vec4 a_Position;', 'attribute float a_PointSize;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = a_PointSize;', '}'].join('');
    var ba = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');

    function draw$3(a, b, c) {
        if (!b) {
            return
        }
        var d = initShaders(a, Z, ba);
        var e = a.getAttribLocation(d, 'a_Position');
        var f = a.getAttribLocation(d, 'a_PointSize');
        var g = a.getUniformLocation(d, 'u_FragColor');
        a.clear(a.COLOR_BUFFER_BIT);
        var h = a.canvas.width / 2;
        var j = a.canvas.height / 2;
        var k = [];
        var l = 0;
        for (var i = 0; i < b.length; i++) {
            var m = b[i].geometry._coordinates;
            var x = (m[0] - h) / h;
            var y = (j - m[1]) / j;
            if (x < -1 || x > 1 || y < -1 || y > 1) {
                continue
            }
            k.push(x, y);
            l++
        }
        var o = new Float32Array(k);
        var n = l;
        var p = a.createBuffer();
        a.bindBuffer(a.ARRAY_BUFFER, p);
        a.bufferData(a.ARRAY_BUFFER, o, a.STATIC_DRAW);
        a.vertexAttribPointer(e, 2, a.FLOAT, false, 0, 0);
        a.enableVertexAttribArray(e);
        a.vertexAttrib1f(f, c._size);
        var q = getColorData(c.fillStyle || 'red');
        a.uniform4f(g, q[0] / 255, q[1] / 255, q[2] / 255, q[3] / 255);
        a.drawArrays(a.POINTS, 0, n)
    }
    var bb = {
        draw: draw$3
    };

    function earcut(a, b, c) {
        c = c || 2;
        var d = b && b.length,
            outerLen = d ? b[0] * c : a.length,
            outerNode = linkedList(a, 0, outerLen, c, true),
            triangles = [];
        if (!outerNode) return triangles;
        var e, minY, maxX, maxY, x, y, bO;
        if (d) outerNode = eliminateHoles(a, b, outerNode, c);
        if (a.length > 80 * c) {
            e = maxX = a[0];
            minY = maxY = a[1];
            for (var i = c; i < outerLen; i += c) {
                x = a[i];
                y = a[i + 1];
                if (x < e) e = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y
            }
            bO = Math.max(maxX - e, maxY - minY)
        }
        earcutLinked(outerNode, triangles, c, e, minY, bO);
        return triangles
    }
    function linkedList(a, b, c, d, e) {
        var i, last;
        if (e === (signedArea(a, b, c, d) > 0)) {
            for (i = b; i < c; i += d) last = insertNode(i, a[i], a[i + 1], last)
        } else {
            for (i = c - d; i >= b; i -= d) last = insertNode(i, a[i], a[i + 1], last)
        }
        if (last && equals(last, last.next)) {
            removeNode(last);
            last = last.next
        }
        return last
    }
    function filterPoints(a, b) {
        if (!a) return a;
        if (!b) b = a;
        var p = a,
            again;
        do {
            again = false;
            if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                removeNode(p);
                p = b = p.prev;
                if (p === p.next) return null;
                again = true
            } else {
                p = p.next
            }
        } while (again || p !== b);
        return b
    }
    function earcutLinked(a, b, c, d, e, f, g) {
        if (!a) return;
        if (!g && f) indexCurve(a, d, e, f);
        var h = a,
            prev, next;
        while (a.prev !== a.next) {
            prev = a.prev;
            next = a.next;
            if (f ? isEarHashed(a, d, e, f) : isEar(a)) {
                b.push(prev.i / c);
                b.push(a.i / c);
                b.push(next.i / c);
                removeNode(a);
                a = next.next;
                h = next.next;
                continue
            }
            a = next;
            if (a === h) {
                if (!g) {
                    earcutLinked(filterPoints(a), b, c, d, e, f, 1)
                } else if (g === 1) {
                    a = cureLocalIntersections(a, b, c);
                    earcutLinked(a, b, c, d, e, f, 2)
                } else if (g === 2) {
                    splitEarcut(a, b, c, d, e, f)
                }
                break
            }
        }
    }
    function isEar(d) {
        var a = d.prev,
            b = d,
            c = d.next;
        if (area(a, b, c) >= 0) return false;
        var p = d.next.next;
        while (p !== d.prev) {
            if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
            p = p.next
        }
        return true
    }
    function isEarHashed(d, e, f, g) {
        var a = d.prev,
            b = d,
            c = d.next;
        if (area(a, b, c) >= 0) return false;
        var h = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
            minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
            maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
            maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);
        var i = zOrder(h, minTY, e, f, g),
            maxZ = zOrder(maxTX, maxTY, e, f, g);
        var p = d.nextZ;
        while (p && p.z <= maxZ) {
            if (p !== d.prev && p !== d.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
            p = p.nextZ
        }
        p = d.prevZ;
        while (p && p.z >= i) {
            if (p !== d.prev && p !== d.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ
        }
        return true
    }
    function cureLocalIntersections(c, d, e) {
        var p = c;
        do {
            var a = p.prev,
                b = p.next.next;
            if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
                d.push(a.i / e);
                d.push(p.i / e);
                d.push(b.i / e);
                removeNode(p);
                removeNode(p.next);
                p = c = b
            }
            p = p.next
        } while (p !== c);
        return p
    }
    function splitEarcut(d, e, f, g, h, i) {
        var a = d;
        do {
            var b = a.next.next;
            while (b !== a.prev) {
                if (a.i !== b.i && isValidDiagonal(a, b)) {
                    var c = splitPolygon(a, b);
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);
                    earcutLinked(a, e, f, g, h, i);
                    earcutLinked(c, e, f, g, h, i);
                    return
                }
                b = b.next
            }
            a = a.next
        } while (a !== d)
    }
    function eliminateHoles(a, b, c, d) {
        var e = [],
            i, len, start, end, list;
        for (i = 0, len = b.length; i < len; i++) {
            start = b[i] * d;
            end = i < len - 1 ? b[i + 1] * d : a.length;
            list = linkedList(a, start, end, d, false);
            if (list === list.next) list.steiner = true;
            e.push(getLeftmost(list))
        }
        e.sort(compareX);
        for (i = 0; i < e.length; i++) {
            eliminateHole(e[i], c);
            c = filterPoints(c, c.next)
        }
        return c
    }
    function compareX(a, b) {
        return a.x - b.x
    }
    function eliminateHole(a, c) {
        c = findHoleBridge(a, c);
        if (c) {
            var b = splitPolygon(c, a);
            filterPoints(b, b.next)
        }
    }
    function findHoleBridge(a, b) {
        var p = b,
            hx = a.x,
            hy = a.y,
            qx = -Infinity,
            m;
        do {
            if (hy <= p.y && hy >= p.next.y) {
                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                if (x <= hx && x > qx) {
                    qx = x;
                    if (x === hx) {
                        if (hy === p.y) return p;
                        if (hy === p.next.y) return p.next
                    }
                    m = p.x < p.next.x ? p : p.next
                }
            }
            p = p.next
        } while (p !== b);
        if (!m) return null;
        if (hx === qx) return m.prev;
        var c = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;
        p = m.next;
        while (p !== c) {
            if (hx >= p.x && p.x >= mx && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
                tan = Math.abs(hy - p.y) / (hx - p.x);
                if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, a)) {
                    m = p;
                    tanMin = tan
                }
            }
            p = p.next
        }
        return m
    }
    function indexCurve(a, b, c, d) {
        var p = a;
        do {
            if (p.z === null) p.z = zOrder(p.x, p.y, b, c, d);
            p.prevZ = p.prev;
            p.nextZ = p.next;
            p = p.next
        } while (p !== a);
        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p)
    }
    function sortLinked(a) {
        var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
        do {
            p = a;
            a = null;
            tail = null;
            numMerges = 0;
            while (p) {
                numMerges++;
                q = p;
                pSize = 0;
                for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;
                    if (!q) break
                }
                qSize = inSize;
                while (pSize > 0 || (qSize > 0 && q)) {
                    if (pSize === 0) {
                        e = q;
                        q = q.nextZ;
                        qSize--
                    } else if (qSize === 0 || !q) {
                        e = p;
                        p = p.nextZ;
                        pSize--
                    } else if (p.z <= q.z) {
                        e = p;
                        p = p.nextZ;
                        pSize--
                    } else {
                        e = q;
                        q = q.nextZ;
                        qSize--
                    }
                    if (tail) tail.nextZ = e;
                    else a = e;
                    e.prevZ = tail;
                    tail = e
                }
                p = q
            }
            tail.nextZ = null;
            inSize *= 2
        } while (numMerges > 1);
        return a
    }
    function zOrder(x, y, a, b, c) {
        x = 32767 * (x - a) / c;
        y = 32767 * (y - b) / c;
        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;
        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;
        return x | (y << 1)
    }
    function getLeftmost(a) {
        var p = a,
            leftmost = a;
        do {
            if (p.x < leftmost.x) leftmost = p;
            p = p.next
        } while (p !== a);
        return leftmost
    }
    function pointInTriangle(a, b, c, d, e, f, g, h) {
        return (e - g) * (b - h) - (a - g) * (f - h) >= 0 && (a - g) * (d - h) - (c - g) * (b - h) >= 0 && (c - g) * (f - h) - (e - g) * (d - h) >= 0
    }
    function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b)
    }
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)
    }
    function equals(a, b) {
        return a.x === b.x && a.y === b.y
    }
    function intersects(a, b, c, d) {
        if ((equals(a, b) && equals(c, d)) || (equals(a, d) && equals(c, b))) return true;
        return area(a, b, c) > 0 !== area(a, b, d) > 0 && area(c, d, a) > 0 !== area(c, d, b) > 0
    }
    function intersectsPolygon(a, b) {
        var p = a;
        do {
            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
            p = p.next
        } while (p !== a);
        return false
    }
    function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0
    }
    function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;
        do {
            if (((p.y > py) !== (p.next.y > py)) && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) inside = !inside;
            p = p.next
        } while (p !== a);
        return inside
    }
    function splitPolygon(a, b) {
        var c = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;
        a.next = b;
        b.prev = a;
        c.next = an;
        an.prev = c;
        b2.next = c;
        c.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2
    }
    function insertNode(i, x, y, a) {
        var p = new Node(i, x, y);
        if (!a) {
            p.prev = p;
            p.next = p
        } else {
            p.next = a.next;
            p.prev = a;
            a.next.prev = p;
            a.next = p
        }
        return p
    }
    function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;
        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ
    }
    function Node(i, x, y) {
        this.i = i;
        this.x = x;
        this.y = y;
        this.prev = null;
        this.next = null;
        this.z = null;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false
    }
    earcut.deviation = function(d, e, f, g) {
        var h = e && e.length;
        var j = h ? e[0] * f : d.length;
        var k = Math.abs(signedArea(d, 0, j, f));
        if (h) {
            for (var i = 0, len = e.length; i < len; i++) {
                var l = e[i] * f;
                var m = i < len - 1 ? e[i + 1] * f : d.length;
                k -= Math.abs(signedArea(d, l, m, f))
            }
        }
        var n = 0;
        for (i = 0; i < g.length; i += 3) {
            var a = g[i] * f;
            var b = g[i + 1] * f;
            var c = g[i + 2] * f;
            n += Math.abs((d[a] - d[c]) * (d[b + 1] - d[a + 1]) - (d[a] - d[b]) * (d[c + 1] - d[a + 1]))
        }
        return k === 0 && n === 0 ? 0 : Math.abs((n - k) / k)
    };

    function signedArea(a, b, c, d) {
        var e = 0;
        for (var i = b, j = c - d; i < c; i += d) {
            e += (a[j] - a[i]) * (a[i + 1] + a[j + 1]);
            j = i
        }
        return e
    }
    earcut.flatten = function(a) {
        var b = a[0][0].length,
            result = {
                vertices: [],
                holes: [],
                dimensions: b
            },
            holeIndex = 0;
        for (var i = 0; i < a.length; i++) {
            for (var j = 0; j < a[i].length; j++) {
                for (var d = 0; d < b; d++) result.vertices.push(a[i][j][d])
            }
            if (i > 0) {
                holeIndex += a[i - 1].length;
                result.holes.push(holeIndex)
            }
        }
        return result
    };
    var bc = ['attribute vec4 a_Position;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = 30.0;', '}'].join('');
    var bd = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');

    function draw$4(a, b, c) {
        if (!b) {
            return
        }
        a.clear(a.COLOR_BUFFER_BIT);
        a.viewport(0, 0, a.canvas.width, a.canvas.height);
        var d = initShaders(a, bc, bd);
        a.enable(a.BLEND);
        a.blendFunc(a.SRC_ALPHA, a.ONE);
        var e = a.canvas.width / 2;
        var f = a.canvas.height / 2;
        a.bindBuffer(a.ARRAY_BUFFER, a.createBuffer());
        a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, a.createBuffer());
        var g = a.getAttribLocation(d, 'a_Position');
        a.vertexAttribPointer(g, 2, a.FLOAT, false, 0, 0);
        a.enableVertexAttribArray(g);
        var h = a.getUniformLocation(d, 'u_FragColor');
        var k = getColorData(c.fillStyle || 'red');
        a.uniform4f(h, k[0] / 255, k[1] / 255, k[2] / 255, k[3] / 255);
        a.lineWidth(c.lineWidth || 1);
        var l = [];
        var m = [];
        var n = 65536;
        var o = 0;
        for (var i = 0, len = b.length; i < len; i++) {
            var p = earcut.flatten(b[i].geometry._coordinates || b[i].geometry.coordinates);
            var q = p.vertices;
            o = l.length / 2;
            for (var j = 0; j < q.length; j += 2) {
                q[j] = (q[j] - e) / e;
                q[j + 1] = (f - q[j + 1]) / f
            }
            if ((l.length + q.length) / 2 > n) {
                a.bufferData(a.ARRAY_BUFFER, new Float32Array(l), a.STATIC_DRAW);
                a.bufferData(a.ELEMENT_ARRAY_BUFFER, new Uint16Array(m), a.STATIC_DRAW);
                a.drawElements(a.TRIANGLES, m.length, a.UNSIGNED_SHORT, 0);
                l.length = 0;
                m.length = 0;
                o = 0
            }
            for (var j = 0; j < q.length; j++) {
                l.push(q[j])
            }
            var r = earcut(q, p.holes, p.dimensions);
            for (var j = 0; j < r.length; j++) {
                m.push(r[j] + o)
            }
        }
        a.bufferData(a.ARRAY_BUFFER, new Float32Array(l), a.STATIC_DRAW);
        a.bufferData(a.ELEMENT_ARRAY_BUFFER, new Uint16Array(m), a.STATIC_DRAW);
        a.drawElements(a.TRIANGLES, m.length, a.UNSIGNED_SHORT, 0);
        a.bindBuffer(a.ARRAY_BUFFER, null);
        a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null)
    }
    var be = {
        draw: draw$4
    };
    var bf = {
        draw: function(a, b, c) {
            var d = b instanceof DataSet ? b.get() : b;
            if (d.length > 0) {
                if (d[0].geometry.type == "LineString") {
                    Y.draw(a, d, c)
                } else if (d[0].geometry.type == "Polygon" || d[0].geometry.type == "MultiPolygon") {
                    be.draw(a, d, c)
                } else {
                    bb.draw(a, d, c)
                }
            }
        }
    };

    function getCurvePoints(a, b) {
        b = b || {};
        var c = [];
        for (var i = 0; i < a.length - 1; i++) {
            var p = getCurveByTwoPoints(a[i], a[i + 1], b.count);
            if (p && p.length > 0) {
                c = c.concat(p)
            }
        }
        return c
    }
    function getCurveByTwoPoints(a, b, c) {
        if (!a || !b) {
            return null
        }
        var d = function(x) {
            return 1 - 2 * x + x * x
        };
        var e = function(x) {
            return 2 * x - 2 * x * x
        };
        var f = function(x) {
            return x * x
        };
        var g = [];
        var c = c || 40;
        var k = false;
        var t, h, h2, lat3, lng3, j, t2;
        var l = [];
        var i = 0;
        var m = 0;
        if (typeof(b) == "undefined") {
            if (typeof(g) != "undefined") {
                g = []
            }
            return
        }
        var n = parseFloat(a.lat);
        var o = parseFloat(b.lat);
        var p = parseFloat(a.lng);
        var q = parseFloat(b.lng);
        if (q > p) {
            if (parseFloat(q - p) > 180) {
                if (p < 0) {
                    p = parseFloat(180 + 180 + p)
                }
            }
        }
        if (p > q) {
            if (parseFloat(p - q) > 180) {
                if (q < 0) {
                    q = parseFloat(180 + 180 + q)
                }
            }
        }
        j = 0;
        t2 = 0;
        if (o == n) {
            t = 0;
            h = p - q
        } else if (q == p) {
            t = Math.PI / 2;
            h = n - o
        } else {
            t = Math.atan((o - n) / (q - p));
            h = (o - n) / Math.sin(t)
        }
        if (t2 == 0) {
            t2 = (t + (Math.PI / 5))
        }
        h2 = h / 2;
        lng3 = h2 * Math.cos(t2) + p;
        lat3 = h2 * Math.sin(t2) + n;
        for (i = 0; i < c + 1; i++) {
            g.push([(p * d(m) + lng3 * e(m)) + q * f(m), (n * d(m) + lat3 * e(m) + o * f(m))]);
            m = m + (1 / c)
        }
        return g
    }
    var bg = {
        getPoints: getCurvePoints
    };
    var bh = function() {
        var l = {},
            data_edges = [],
            compatibility_list_for_edge = [],
            subdivision_points_for_edge = [],
            K = 0.1,
            S_initial = 0.1,
            P_initial = 1,
            P_rate = 2,
            C = 6,
            I_initial = 70,
            I_rate = 0.6666667,
            compatibility_threshold = 0.6,
            invers_quadratic_mode = false,
            eps = 1e-8;

        function vector_dot_product(p, q) {
            return p.x * q.x + p.y * q.y
        }
        function edge_as_vector(P) {
            return {
                'x': l[P.target].x - l[P.source].x,
                'y': l[P.target].y - l[P.source].y
            }
        }
        function edge_length(e) {
            return Math.sqrt(Math.pow(l[e.source].x - l[e.target].x, 2) + Math.pow(l[e.source].y - l[e.target].y, 2))
        }
        function custom_edge_length(e) {
            return Math.sqrt(Math.pow(e.source.x - e.target.x, 2) + Math.pow(e.source.y - e.target.y, 2))
        }
        function edge_midpoint(e) {
            var a = (l[e.source].x + l[e.target].x) / 2.0;
            var b = (l[e.source].y + l[e.target].y) / 2.0;
            return {
                'x': a,
                'y': b
            }
        }
        function compute_divided_edge_length(a) {
            var b = 0;
            for (var i = 1; i < subdivision_points_for_edge[a].length; i++) {
                var c = euclidean_distance(subdivision_points_for_edge[a][i], subdivision_points_for_edge[a][i - 1]);
                b += c
            }
            return b
        }
        function euclidean_distance(p, q) {
            return Math.sqrt(Math.pow(p.x - q.x, 2) + Math.pow(p.y - q.y, 2))
        }
        function project_point_on_line(p, Q) {
            var L = Math.sqrt((Q.target.x - Q.source.x) * (Q.target.x - Q.source.x) + (Q.target.y - Q.source.y) * (Q.target.y - Q.source.y));
            var r = ((Q.source.y - p.y) * (Q.source.y - Q.target.y) - (Q.source.x - p.x) * (Q.target.x - Q.source.x)) / (L * L);
            return {
                'x': (Q.source.x + r * (Q.target.x - Q.source.x)),
                'y': (Q.source.y + r * (Q.target.y - Q.source.y))
            }
        }
        function initialize_edge_subdivisions() {
            for (var i = 0; i < data_edges.length; i++) if (P_initial == 1) subdivision_points_for_edge[i] = [];
            else {
                subdivision_points_for_edge[i] = [];
                subdivision_points_for_edge[i].push(l[data_edges[i].source]);
                subdivision_points_for_edge[i].push(l[data_edges[i].target])
            }
        }
        function initialize_compatibility_lists() {
            for (var i = 0; i < data_edges.length; i++) compatibility_list_for_edge[i] = []
        }
        function filter_self_loops(a) {
            var b = [];
            for (var e = 0; e < a.length; e++) {
                if (l[a[e].source].x != l[a[e].target].x && l[a[e].source].y != l[a[e].target].y) {
                    b.push(a[e])
                }
            }
            return b
        }
        function apply_spring_force(a, i, b) {
            var c = subdivision_points_for_edge[a][i - 1];
            var d = subdivision_points_for_edge[a][i + 1];
            var e = subdivision_points_for_edge[a][i];
            var x = c.x - e.x + d.x - e.x;
            var y = c.y - e.y + d.y - e.y;
            x *= b;
            y *= b;
            return {
                'x': x,
                'y': y
            }
        }
        function apply_electrostatic_force(a, i, S) {
            var b = {
                'x': 0,
                'y': 0
            };
            var c = compatibility_list_for_edge[a];
            for (var d = 0; d < c.length; d++) {
                var e = {
                    'x': subdivision_points_for_edge[c[d]][i].x - subdivision_points_for_edge[a][i].x,
                    'y': subdivision_points_for_edge[c[d]][i].y - subdivision_points_for_edge[a][i].y
                };
                if ((Math.abs(e.x) > eps) || (Math.abs(e.y) > eps)) {
                    var f = (1 / Math.pow(custom_edge_length({
                        'source': subdivision_points_for_edge[c[d]][i],
                        'target': subdivision_points_for_edge[a][i]
                    }), 1));
                    b.x += e.x * f;
                    b.y += e.y * f
                }
            }
            return b
        }
        function apply_resulting_forces_on_subdivision_points(a, P, S) {
            var b = K / (edge_length(data_edges[a]) * (P + 1));
            var c = [{
                'x': 0,
                'y': 0
            }];
            for (var i = 1; i < P + 1; i++) {
                var d = {
                    'x': 0,
                    'y': 0
                };
                var e = apply_spring_force(a, i, b);
                var f = apply_electrostatic_force(a, i, S);
                d.x = S * (e.x + f.x);
                d.y = S * (e.y + f.y);
                c.push(d)
            }
            c.push({
                'x': 0,
                'y': 0
            });
            return c
        }
        function update_edge_divisions(P) {
            for (var a = 0; a < data_edges.length; a++) {
                if (P == 1) {
                    subdivision_points_for_edge[a].push(l[data_edges[a].source]);
                    subdivision_points_for_edge[a].push(edge_midpoint(data_edges[a]));
                    subdivision_points_for_edge[a].push(l[data_edges[a].target])
                } else {
                    var b = compute_divided_edge_length(a);
                    var c = b / (P + 1);
                    var d = c;
                    var e = [];
                    e.push(l[data_edges[a].source]);
                    for (var i = 1; i < subdivision_points_for_edge[a].length; i++) {
                        var f = euclidean_distance(subdivision_points_for_edge[a][i], subdivision_points_for_edge[a][i - 1]);
                        while (f > d) {
                            var g = d / f;
                            var h = subdivision_points_for_edge[a][i - 1].x;
                            var j = subdivision_points_for_edge[a][i - 1].y;
                            h += g * (subdivision_points_for_edge[a][i].x - subdivision_points_for_edge[a][i - 1].x);
                            j += g * (subdivision_points_for_edge[a][i].y - subdivision_points_for_edge[a][i - 1].y);
                            e.push({
                                'x': h,
                                'y': j
                            });
                            f -= d;
                            d = c
                        }
                        d -= f
                    }
                    e.push(l[data_edges[a].target]);
                    subdivision_points_for_edge[a] = e
                }
            }
        }
        function angle_compatibility(P, Q) {
            var a = Math.abs(vector_dot_product(edge_as_vector(P), edge_as_vector(Q)) / (edge_length(P) * edge_length(Q)));
            return a
        }
        function scale_compatibility(P, Q) {
            var a = (edge_length(P) + edge_length(Q)) / 2.0;
            var b = 2.0 / (a / Math.min(edge_length(P), edge_length(Q)) + Math.max(edge_length(P), edge_length(Q)) / a);
            return b
        }
        function position_compatibility(P, Q) {
            var a = (edge_length(P) + edge_length(Q)) / 2.0;
            var b = {
                'x': (l[P.source].x + l[P.target].x) / 2.0,
                'y': (l[P.source].y + l[P.target].y) / 2.0
            };
            var c = {
                'x': (l[Q.source].x + l[Q.target].x) / 2.0,
                'y': (l[Q.source].y + l[Q.target].y) / 2.0
            };
            var d = a / (a + euclidean_distance(b, c));
            return d
        }
        function edge_visibility(P, Q) {
            var a = project_point_on_line(l[Q.source], {
                'source': l[P.source],
                'target': l[P.target]
            });
            var b = project_point_on_line(l[Q.target], {
                'source': l[P.source],
                'target': l[P.target]
            });
            var c = {
                'x': (a.x + b.x) / 2.0,
                'y': (a.y + b.y) / 2.0
            };
            var d = {
                'x': (l[P.source].x + l[P.target].x) / 2.0,
                'y': (l[P.source].y + l[P.target].y) / 2.0
            };
            var e = Math.max(0, 1 - 2 * euclidean_distance(d, c) / euclidean_distance(a, b));
            return e
        }
        function visibility_compatibility(P, Q) {
            return Math.min(edge_visibility(P, Q), edge_visibility(Q, P))
        }
        function compatibility_score(P, Q) {
            var a = (angle_compatibility(P, Q) * scale_compatibility(P, Q) * position_compatibility(P, Q) * visibility_compatibility(P, Q));
            return a
        }
        function are_compatible(P, Q) {
            return (compatibility_score(P, Q) >= compatibility_threshold)
        }
        function compute_compatibility_lists() {
            for (var e = 0; e < data_edges.length - 1; e++) {
                for (var a = e + 1; a < data_edges.length; a++) {
                    if (e == a) continue;
                    else {
                        if (are_compatible(data_edges[e], data_edges[a])) {
                            compatibility_list_for_edge[e].push(a);
                            compatibility_list_for_edge[a].push(e)
                        }
                    }
                }
            }
        }
        var m = function() {
            var S = S_initial;
            var I = I_initial;
            var P = P_initial;
            initialize_edge_subdivisions();
            initialize_compatibility_lists();
            update_edge_divisions(P);
            compute_compatibility_lists();
            for (var a = 0; a < C; a++) {
                for (var b = 0; b < I; b++) {
                    var c = [];
                    for (var d = 0; d < data_edges.length; d++) {
                        c[d] = apply_resulting_forces_on_subdivision_points(d, P, S)
                    }
                    for (var e = 0; e < data_edges.length; e++) {
                        for (var i = 0; i < P + 1; i++) {
                            subdivision_points_for_edge[e][i].x += c[e][i].x;
                            subdivision_points_for_edge[e][i].y += c[e][i].y
                        }
                    }
                }
                S = S / 2;
                P = P * 2;
                I = I_rate * I;
                update_edge_divisions(P)
            }
            return subdivision_points_for_edge
        };
        m.nodes = function(a) {
            if (arguments.length == 0) {
                return l
            } else {
                l = a
            }
            return m
        };
        m.edges = function(a) {
            if (arguments.length == 0) {
                return data_edges
            } else {
                data_edges = filter_self_loops(a)
            }
            return m
        };
        m.bundling_stiffness = function(k) {
            if (arguments.length == 0) {
                return K
            } else {
                K = k
            }
            return m
        };
        m.step_size = function(a) {
            if (arguments.length == 0) {
                return S_initial
            } else {
                S_initial = a
            }
            return m
        };
        m.cycles = function(c) {
            if (arguments.length == 0) {
                return C
            } else {
                C = c
            }
            return m
        };
        m.iterations = function(i) {
            if (arguments.length == 0) {
                return I_initial
            } else {
                I_initial = i
            }
            return m
        };
        m.iterations_rate = function(i) {
            if (arguments.length == 0) {
                return I_rate
            } else {
                I_rate = i
            }
            return m
        };
        m.subdivision_points_seed = function(p) {
            if (arguments.length == 0) {
                return P
            } else {
                P = p
            }
            return m
        };
        m.subdivision_rate = function(r) {
            if (arguments.length == 0) {
                return P_rate
            } else {
                P_rate = r
            }
            return m
        };
        m.compatbility_threshold = function(t) {
            if (arguments.length == 0) {
                return compatbility_threshold
            } else {
                compatibility_threshold = t
            }
            return m
        };
        return m
    };

    function Category(a) {
        this.splitList = a || {
                other: 1
            }
    }
    Category.prototype.get = function(a) {
        var b = this.splitList;
        var c = b['other'];
        for (var i in b) {
            if (a == i) {
                c = b[i];
                break
            }
        }
        return c
    };
    Category.prototype.generateByDataSet = function(a, b) {
        var c = b || ['rgba(255, 255, 0, 0.8)', 'rgba(253, 98, 104, 0.8)', 'rgba(255, 146, 149, 0.8)', 'rgba(255, 241, 193, 0.8)', 'rgba(110, 176, 253, 0.8)', 'rgba(52, 139, 251, 0.8)', 'rgba(17, 102, 252, 0.8)'];
        var d = a.get();
        this.splitList = {};
        var e = 0;
        for (var i = 0; i < d.length; i++) {
            if (this.splitList[d[i].count] === undefined) {
                this.splitList[d[i].count] = c[e];
                e++
            }
            if (e >= c.length - 1) {
                break
            }
        }
        this.splitList['other'] = c[c.length - 1]
    };
    Category.prototype.getLegend = function(a) {
        var b = this.splitList;
        var c = document.createElement('div');
        c.style.cssText = "background:#fff; padding: 5px; border: 1px solid #ccc;";
        var d = '';
        for (var e in b) {
            d += '<div style="line-height: 19px;" value="' + e + '"><span style="vertical-align: -2px; display: inline-block; width: 30px;height: 19px;background:' + b[e] + ';"></span><span style="margin-left: 3px;">' + e + '<span></div>'
        }
        c.innerHTML = d;
        return c
    };

    function Choropleth(a) {
        this.splitList = a || [{
                start: 0,
                value: 'red'
            }]
    }
    Choropleth.prototype.get = function(a) {
        var b = this.splitList;
        var c = false;
        for (var i = 0; i < b.length; i++) {
            if ((b[i].start === undefined || b[i].start !== undefined && a >= b[i].start) && (b[i].end === undefined || b[i].end !== undefined && a < b[i].end)) {
                c = b[i].value;
                break
            }
        }
        return c
    };
    Choropleth.prototype.generateByDataSet = function(a) {
        var b = a.getMin('count');
        var c = a.getMax('count');
        this.generateByMinMax(b, c)
    };
    Choropleth.prototype.generateByMinMax = function(a, b) {
        var c = ['rgba(255, 255, 0, 0.8)', 'rgba(253, 98, 104, 0.8)', 'rgba(255, 146, 149, 0.8)', 'rgba(255, 241, 193, 0.8)', 'rgba(110, 176, 253, 0.8)', 'rgba(52, 139, 251, 0.8)', 'rgba(17, 102, 252, 0.8)'];
        var d = Number((b - a) / 7);
        b = Number(b);
        var e = Number(a);
        this.splitList = [];
        var f = 0;
        while (e < b) {
            this.splitList.push({
                start: e,
                end: e + d,
                value: c[f]
            });
            f++;
            e += d
        }
    };
    Choropleth.prototype.getLegend = function(a) {
        var b = this.splitList
    };

    function CanvasLayer(a) {
        this.options = a || {};
        this.paneName = this.options.paneName || 'mapPane';
        this.context = this.options.context || '2d';
        this.zIndex = this.options.zIndex || 0;
        this.mixBlendMode = this.options.mixBlendMode || null;
        this.enableMassClear = this.options.enableMassClear;
        this._map = a.map;
        this._lastDrawTime = null;
        this.show(this._map)
    }
    var bi = typeof window === 'undefined' ? {} : window;
    if (bi.ol) {
        CanvasLayer.prototype.initialize = function(a) {
            this._map = a;
            var b = this.canvas = document.createElement("canvas");
            b.style.cssText = "position:absolute;" + "left:0;" + "top:0;" + "z-index:" + this.zIndex + ";user-select:none;";
            b.style.mixBlendMode = this.mixBlendMode;
            this.adjustSize(a);
            this._map.getViewport().appendChild(b);
            var c = this;
            this._map.getView().on('propertychange', function() {
                $(b).hide()
            });
            this._map.on("moveend", function() {
                $(b).show();
                c.adjustSize(a);
                c._draw()
            });
            return this.canvas
        };
        CanvasLayer.prototype.adjustSize = function(a) {
            var b = a.getSize();
            var c = this.canvas;
            c.width = b[0];
            c.height = b[1];
            c.style.width = c.width + 'px';
            c.style.height = c.height + 'px'
        };
        CanvasLayer.prototype.adjustRatio = function(a) {
            var b = a.backingStorePixelRatio || a.webkitBackingStorePixelRatio || a.mozBackingStorePixelRatio || a.msBackingStorePixelRatio || a.oBackingStorePixelRatio || a.backingStorePixelRatio || 1;
            var c = (window.devicePixelRatio || 1) / b;
            var d = a.canvas.width;
            var e = a.canvas.height;
            a.canvas.width = d * c;
            a.canvas.height = e * c;
            a.canvas.style.width = d + 'px';
            a.canvas.style.height = e + 'px';
            a.scale(c, c)
        };
        CanvasLayer.prototype.draw = function() {
            var a = this;
            clearTimeout(a.timeoutID);
            a.timeoutID = setTimeout(function() {
                a._draw()
            }, 15)
        };
        CanvasLayer.prototype._draw = function() {
            var a = this._map;
            var b = a.getSize();
            var c = a.getView().getCenter();
            if (c) {
                var d = a.getPixelFromCoordinate(c);
                this.canvas.style.left = d[0] - b[0] / 2 + 'px';
                this.canvas.style.top = d[1] - b[1] / 2 + 'px';
                this.options.update && this.options.update.bind(this)()
            }
        };
        CanvasLayer.prototype.getContainer = function() {
            return this.canvas
        };
        CanvasLayer.prototype.show = function(a) {
            this.initialize(a);
            this.canvas.style.display = "block"
        };
        CanvasLayer.prototype.hide = function() {
            this.canvas.style.display = "none"
        };
        CanvasLayer.prototype.setZIndex = function(a) {
            this.canvas.style.zIndex = a
        };
        CanvasLayer.prototype.getZIndex = function() {
            return this.zIndex
        }
    }
    var bj = bj || (function() {
            var c = [];
            return {
                getAll: function() {
                    return c
                },
                removeAll: function() {
                    c = []
                },
                add: function(a) {
                    c.push(a)
                },
                remove: function(a) {
                    var i = c.indexOf(a);
                    if (i !== -1) {
                        c.splice(i, 1)
                    }
                },
                update: function(a, b) {
                    if (c.length === 0) {
                        return false
                    }
                    var i = 0;
                    a = a !== undefined ? a : bj.now();
                    while (i < c.length) {
                        if (c[i].update(a) || b) {
                            i++
                        } else {
                            c.splice(i, 1)
                        }
                    }
                    return true
                }
            }
        })();
    if (typeof(window) === 'undefined' && typeof(process) !== 'undefined') {
        bj.now = function() {
            var a = process.hrtime();
            return a[0] * 1000 + a[1] / 1000000
        }
    } else if (typeof(window) !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {
        bj.now = window.performance.now.bind(window.performance)
    } else if (Date.now !== undefined) {
        bj.now = Date.now
    } else {
        bj.now = function() {
            return new Date().getTime()
        }
    }
    bj.Tween = function(h) {
        var j = h;
        var k = {};
        var l = {};
        var m = {};
        var n = 1000;
        var o = 0;
        var p;
        var q = false;
        var r = false;
        var s = false;
        var t = 0;
        var u = null;
        var v = bj.Easing.Linear.None;
        var w = bj.Interpolation.Linear;
        var x = [];
        var y = null;
        var z = false;
        var A = null;
        var B = null;
        var C = null;
        this.to = function(a, b) {
            l = a;
            if (b !== undefined) {
                n = b
            }
            return this
        };
        this.start = function(a) {
            bj.add(this);
            r = true;
            z = false;
            u = a !== undefined ? a : bj.now();
            u += t;
            for (var b in l) {
                if (l[b] instanceof Array) {
                    if (l[b].length === 0) {
                        continue
                    }
                    l[b] = [j[b]].concat(l[b])
                }
                if (j[b] === undefined) {
                    continue
                }
                k[b] = j[b];
                if ((k[b] instanceof Array) === false) {
                    k[b] *= 1.0
                }
                m[b] = k[b] || 0
            }
            return this
        };
        this.stop = function() {
            if (!r) {
                return this
            }
            bj.remove(this);
            r = false;
            if (C !== null) {
                C.call(j, j)
            }
            this.stopChainedTweens();
            return this
        };
        this.end = function() {
            this.update(u + n);
            return this
        };
        this.stopChainedTweens = function() {
            for (var i = 0, numChainedTweens = x.length; i < numChainedTweens; i++) {
                x[i].stop()
            }
        };
        this.delay = function(a) {
            t = a;
            return this
        };
        this.repeat = function(a) {
            o = a;
            return this
        };
        this.repeatDelay = function(a) {
            p = a;
            return this
        };
        this.yoyo = function(a) {
            q = a;
            return this
        };
        this.easing = function(a) {
            v = a;
            return this
        };
        this.interpolation = function(a) {
            w = a;
            return this
        };
        this.chain = function() {
            x = arguments;
            return this
        };
        this.onStart = function(a) {
            y = a;
            return this
        };
        this.onUpdate = function(a) {
            A = a;
            return this
        };
        this.onComplete = function(a) {
            B = a;
            return this
        };
        this.onStop = function(a) {
            C = a;
            return this
        };
        this.update = function(a) {
            var b;
            var c;
            var d;
            if (a < u) {
                return true
            }
            if (z === false) {
                if (y !== null) {
                    y.call(j, j)
                }
                z = true
            }
            c = (a - u) / n;
            c = c > 1 ? 1 : c;
            d = v(c);
            for (b in l) {
                if (k[b] === undefined) {
                    continue
                }
                var e = k[b] || 0;
                var f = l[b];
                if (f instanceof Array) {
                    j[b] = w(f, d)
                } else {
                    if (typeof(f) === 'string') {
                        if (f.charAt(0) === '+' || f.charAt(0) === '-') {
                            f = e + parseFloat(f)
                        } else {
                            f = parseFloat(f)
                        }
                    }
                    if (typeof(f) === 'number') {
                        j[b] = e + (f - e) * d
                    }
                }
            }
            if (A !== null) {
                A.call(j, d)
            }
            if (c === 1) {
                if (o > 0) {
                    if (isFinite(o)) {
                        o--
                    }
                    for (b in m) {
                        if (typeof(l[b]) === 'string') {
                            m[b] = m[b] + parseFloat(l[b])
                        }
                        if (q) {
                            var g = m[b];
                            m[b] = l[b];
                            l[b] = g
                        }
                        k[b] = m[b]
                    }
                    if (q) {
                        s = !s
                    }
                    if (p !== undefined) {
                        u = a + p
                    } else {
                        u = a + t
                    }
                    return true
                } else {
                    if (B !== null) {
                        B.call(j, j)
                    }
                    for (var i = 0, numChainedTweens = x.length; i < numChainedTweens; i++) {
                        x[i].start(u + n)
                    }
                    return false
                }
            }
            return true
        }
    };
    bj.Easing = {
        Linear: {
            None: function(k) {
                return k
            }
        },
        Quadratic: {
            In: function(k) {
                return k * k
            },
            Out: function(k) {
                return k * (2 - k)
            },
            InOut: function(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k
                }
                return -0.5 * (--k * (k - 2) - 1)
            }
        },
        Cubic: {
            In: function(k) {
                return k * k * k
            },
            Out: function(k) {
                return --k * k * k + 1
            },
            InOut: function(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k
                }
                return 0.5 * ((k -= 2) * k * k + 2)
            }
        },
        Quartic: {
            In: function(k) {
                return k * k * k * k
            },
            Out: function(k) {
                return 1 - (--k * k * k * k)
            },
            InOut: function(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k * k
                }
                return -0.5 * ((k -= 2) * k * k * k - 2)
            }
        },
        Quintic: {
            In: function(k) {
                return k * k * k * k * k
            },
            Out: function(k) {
                return --k * k * k * k * k + 1
            },
            InOut: function(k) {
                if ((k *= 2) < 1) {
                    return 0.5 * k * k * k * k * k
                }
                return 0.5 * ((k -= 2) * k * k * k * k + 2)
            }
        },
        Sinusoidal: {
            In: function(k) {
                return 1 - Math.cos(k * Math.PI / 2)
            },
            Out: function(k) {
                return Math.sin(k * Math.PI / 2)
            },
            InOut: function(k) {
                return 0.5 * (1 - Math.cos(Math.PI * k))
            }
        },
        Exponential: {
            In: function(k) {
                return k === 0 ? 0 : Math.pow(1024, k - 1)
            },
            Out: function(k) {
                return k === 1 ? 1 : 1 - Math.pow(2, -10 * k)
            },
            InOut: function(k) {
                if (k === 0) {
                    return 0
                }
                if (k === 1) {
                    return 1
                }
                if ((k *= 2) < 1) {
                    return 0.5 * Math.pow(1024, k - 1)
                }
                return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2)
            }
        },
        Circular: {
            In: function(k) {
                return 1 - Math.sqrt(1 - k * k)
            },
            Out: function(k) {
                return Math.sqrt(1 - (--k * k))
            },
            InOut: function(k) {
                if ((k *= 2) < 1) {
                    return -0.5 * (Math.sqrt(1 - k * k) - 1)
                }
                return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1)
            }
        },
        Elastic: {
            In: function(k) {
                if (k === 0) {
                    return 0
                }
                if (k === 1) {
                    return 1
                }
                return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
            },
            Out: function(k) {
                if (k === 0) {
                    return 0
                }
                if (k === 1) {
                    return 1
                }
                return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1
            },
            InOut: function(k) {
                if (k === 0) {
                    return 0
                }
                if (k === 1) {
                    return 1
                }
                k *= 2;
                if (k < 1) {
                    return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
                }
                return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1
            }
        },
        Back: {
            In: function(k) {
                var s = 1.70158;
                return k * k * ((s + 1) * k - s)
            },
            Out: function(k) {
                var s = 1.70158;
                return --k * k * ((s + 1) * k + s) + 1
            },
            InOut: function(k) {
                var s = 1.70158 * 1.525;
                if ((k *= 2) < 1) {
                    return 0.5 * (k * k * ((s + 1) * k - s))
                }
                return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)
            }
        },
        Bounce: {
            In: function(k) {
                return 1 - bj.Easing.Bounce.Out(1 - k)
            },
            Out: function(k) {
                if (k < (1 / 2.75)) {
                    return 7.5625 * k * k
                } else if (k < (2 / 2.75)) {
                    return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75
                } else if (k < (2.5 / 2.75)) {
                    return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375
                } else {
                    return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375
                }
            },
            InOut: function(k) {
                if (k < 0.5) {
                    return bj.Easing.Bounce.In(k * 2) * 0.5
                }
                return bj.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5
            }
        }
    };
    bj.Interpolation = {
        Linear: function(v, k) {
            var m = v.length - 1;
            var f = m * k;
            var i = Math.floor(f);
            var a = bj.Interpolation.Utils.Linear;
            if (k < 0) {
                return a(v[0], v[1], f)
            }
            if (k > 1) {
                return a(v[m], v[m - 1], m - f)
            }
            return a(v[i], v[i + 1 > m ? m : i + 1], f - i)
        },
        Bezier: function(v, k) {
            var b = 0;
            var n = v.length - 1;
            var a = Math.pow;
            var c = bj.Interpolation.Utils.Bernstein;
            for (var i = 0; i <= n; i++) {
                b += a(1 - k, n - i) * a(k, i) * v[i] * c(n, i)
            }
            return b
        },
        CatmullRom: function(v, k) {
            var m = v.length - 1;
            var f = m * k;
            var i = Math.floor(f);
            var a = bj.Interpolation.Utils.CatmullRom;
            if (v[0] === v[m]) {
                if (k < 0) {
                    i = Math.floor(f = m * (1 + k))
                }
                return a(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i)
            } else {
                if (k < 0) {
                    return v[0] - (a(v[0], v[0], v[1], v[1], -f) - v[0])
                }
                if (k > 1) {
                    return v[m] - (a(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m])
                }
                return a(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i)
            }
        },
        Utils: {
            Linear: function(a, b, t) {
                return (b - a) * t + a
            },
            Bernstein: function(n, i) {
                var a = bj.Interpolation.Utils.Factorial;
                return a(n) / a(i) / a(n - i)
            },
            Factorial: (function() {
                var a = [1];
                return function(n) {
                    var s = 1;
                    if (a[n]) {
                        return a[n]
                    }
                    for (var i = n; i > 1; i--) {
                        s *= i
                    }
                    a[n] = s;
                    return s
                }
            })(),
            CatmullRom: function(a, b, c, d, t) {
                var e = (c - a) * 0.5;
                var f = (d - b) * 0.5;
                var g = t * t;
                var h = t * g;
                return (2 * b - 2 * c + e + f) * h + (-3 * b + 3 * c - 2 * e - f) * g + e * t + b
            }
        }
    };
    var bk = {
        draw: function(a, b, c) {
            var d = b instanceof DataSet ? b.get() : b;
            a.save();
            for (var e in c) {
                a[e] = c[e]
            }
            var f = c.offset || {
                    x: 0,
                    y: 0
                };
            var g = [];
            var h = c._size || c.size;
            if (h) {
                a.font = "bold " + h + "px Arial"
            } else {
                h = 12
            }
            var j = c.textKey || 'text';
            if (!c.textAlign) {
                a.textAlign = 'center'
            }
            if (!c.textBaseline) {
                a.textBaseline = 'middle'
            }
            if (c.avoid) {
                for (var i = 0, len = d.length; i < len; i++) {
                    var k = d[i].geometry._coordinates || d[i].geometry.coordinates;
                    var x = k[0] + f.x;
                    var y = k[1] + f.y;
                    var l = d[i][j];
                    var m = a.measureText(l).width;
                    var n = x - m / 2;
                    var o = y - h / 2;
                    var p = {
                        sw: {
                            x: n,
                            y: o + h
                        },
                        ne: {
                            x: n + m,
                            y: o
                        }
                    };
                    if (!hasOverlay(g, p)) {
                        g.push(p);
                        n = n + m / 2;
                        o = o + h / 2;
                        a.fillText(l, n, o)
                    }
                }
            } else {
                for (var i = 0, len = d.length; i < len; i++) {
                    var k = d[i].geometry._coordinates || d[i].geometry.coordinates;
                    var x = k[0] + f.x;
                    var y = k[1] + f.y;
                    var l = d[i][j];
                    a.fillText(l, x, y)
                }
            }
            a.restore()
        }
    };

    function hasOverlay(a, b) {
        for (var i = 0; i < a.length; i++) {
            if (isRectOverlay(a[i], b)) {
                return true
            }
        }
        return false
    }
    function isRectOverlay(a, b) {
        var c = Math.min(a.ne.x, b.ne.x);
        var d = Math.min(a.sw.y, b.sw.y);
        var e = Math.max(a.sw.x, b.sw.x);
        var f = Math.max(a.ne.y, b.ne.y);
        if (c > e && d > f) {
            return true
        }
        return false
    }
    var bl = {
        draw: function(a, b, c) {
            var d = b instanceof DataSet ? b.get() : b;
            a.fillStyle = 'white';
            a.textAlign = 'center';
            a.textBaseline = 'middle';
            var e = c.offset || {
                    x: 0,
                    y: 0
                };
            for (var i = 0, len = d.length; i < len; i++) {
                if (d[i].geometry) {
                    var f = d[i].deg || c.deg;
                    var g = d[i].icon || c.icon;
                    var h = d[i].geometry._coordinates || d[i].geometry.coordinates;
                    var x = h[0];
                    var y = h[1];
                    if (f) {
                        a.save();
                        a.translate(x, y);
                        a.rotate(f * Math.PI / 180);
                        a.translate(-x, -y)
                    }
                    var j = c._width || c.width || g.width;
                    var k = c._height || c.height || g.height;
                    x = x - j / 2 + e.x;
                    y = y - k / 2 + e.y;
                    if (c.sx && c.sy && c.swidth && c.sheight && c.width && c.height) {
                        a.drawImage(g, c.sx, c.sy, c.swidth, c.sheight, x, y, j, k)
                    } else if (c.width && c.height) {
                        a.drawImage(g, x, y, j, k)
                    } else {
                        a.drawImage(g, x, y)
                    }
                    if (f) {
                        a.restore()
                    }
                }
            }
        }
    };
    if (typeof window !== 'undefined') {
        requestAnimationFrame(animate)
    }
    function animate(a) {
        requestAnimationFrame(animate);
        bj.update(a)
    }
    class BaseLayer {
        constructor(bG, dataSet, bA) {
            if (!(dataSet instanceof DataSet)) {
                dataSet = new DataSet(dataSet)
            }
            this.dataSet = dataSet;
            this.map = bG
        }
        getDefaultContextConfig() {
            return {
                globalAlpha: 1,
                globalCompositeOperation: 'source-over',
                imageSmoothingEnabled: true,
                strokeStyle: '#000000',
                fillStyle: '#000000',
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                shadowBlur: 0,
                shadowColor: 'rgba(0, 0, 0, 0)',
                lineWidth: 1,
                lineCap: 'butt',
                lineJoin: 'miter',
                miterLimit: 10,
                lineDashOffset: 0,
                font: '10px sans-serif',
                textAlign: 'start',
                textBaseline: 'alphabetic'
            }
        }
        initDataRange(bA) {
            var bm = this;
            bm.intensity = new Intensity({
                maxSize: bm.options.maxSize,
                minSize: bm.options.minSize,
                gradient: bm.options.gradient,
                max: bm.options.max || this.dataSet.getMax('count')
            });
            bm.category = new Category(bm.options.splitList);
            bm.choropleth = new Choropleth(bm.options.splitList);
            if (bm.options.splitList === undefined) {
                bm.category.generateByDataSet(this.dataSet, bm.options.color)
            }
            if (bm.options.splitList === undefined) {
                var bn = bm.options.min || this.dataSet.getMin('count');
                var bo = bm.options.max || this.dataSet.getMax('count');
                bm.choropleth.generateByMinMax(bn, bo)
            }
        }
        getLegend(bA) {
            var bq = this.options.draw;
            var br = null;
            var bm = this;
            if (bm.options.draw == 'intensity' || bm.options.draw == 'heatmap') {
                return this.intensity.getLegend(bA)
            } else if (bm.options.draw == 'category') {
                return this.category.getLegend(bA)
            }
        }
        processData(bx) {
            var bm = this;
            var bq = bm.options.draw;
            if (bq == 'bubble' || bq == 'intensity' || bq == 'category' || bq == 'choropleth' || bq == 'simple') {
                for (var i = 0; i < bx.length; i++) {
                    var bs = bx[i];
                    if (bm.options.draw == 'bubble') {
                        bx[i]._size = bm.intensity.getSize(bs.count)
                    } else {
                        bx[i]._size = undefined
                    }
                    var bt = '_fillStyle';
                    if (bx[i].geometry.type === 'LineString' || bm.options.styleType === 'stroke') {
                        bt = '_strokeStyle'
                    }
                    if (bm.options.draw == 'intensity') {
                        bx[i][bt] = bm.intensity.getColor(bs.count)
                    } else if (bm.options.draw == 'category') {
                        bx[i][bt] = bm.category.get(bs.count)
                    } else if (bm.options.draw == 'choropleth') {
                        bx[i][bt] = bm.choropleth.get(bs.count)
                    }
                }
            }
        }
        isEnabledTime() {
            var bu = this.options.animation;
            var bv = (bu && !(bu.enabled === false));
            return bv
        }
        argCheck(bA) {
            if (bA.draw == 'heatmap') {
                if (bA.strokeStyle) {
                    console.warn('[heatmap] options.strokeStyle is discard, pleause use options.strength [eg: options.strength = 0.1]')
                }
            }
        }
        drawContext(bw, dataSet, bA, bU) {
            var bm = this;
            switch (bm.options.draw) {
                case 'heatmap':
                    T.draw(bw, dataSet, bm.options);
                    break;
                case 'grid':
                case 'honeycomb':
                    bm.options.offset = {
                        x: bU[0],
                        y: bU[1]
                    };
                    if (bm.options.draw == 'grid') {
                        U.draw(bw, dataSet, bm.options)
                    } else {
                        V.draw(bw, dataSet, bm.options)
                    }
                    break;
                case 'text':
                    bk.draw(bw, dataSet, bm.options);
                    break;
                case 'icon':
                    bl.draw(bw, dataSet, bm.options);
                    break;
                case 'clip':
                    bw.save();
                    bw.fillStyle = bm.options.fillStyle || 'rgba(0, 0, 0, 0.5)';
                    bw.fillRect(0, 0, bw.canvas.width, bw.canvas.height);
                    N.draw(bw, dataSet, bm.options);
                    bw.beginPath();
                    M.drawDataSet(bw, dataSet, bm.options);
                    bw.clip();
                    F(bw);
                    bw.restore();
                    break;
                default:
                    if (bm.options.context == "webgl") {
                        bf.draw(bm.canvasLayer.canvas.getContext('webgl'), dataSet, bm.options)
                    } else {
                        N.draw(bw, dataSet, bm.options)
                    }
            }
        }
        isPointInPath(bw, bF) {
            var bw = this.canvasLayer.canvas.getContext(this.context);
            var bx = this.dataSet.get();
            for (var i = 0; i < bx.length; i++) {
                bw.beginPath();
                M.draw(bw, bx[i], this.options);
                var x = bF[0];
                var y = bF[1];
                if (bw.isPointInPath(x, y) || bw.isPointInStroke(x, y)) {
                    return bx[i]
                }
            }
        }
        clickEvent(bF, e) {
            var by = this.isPointInPath(this.getContext(), bF);
            if (by) {
                this.options.methods.click(by, e)
            } else {
                this.options.methods.click(null, e)
            }
        }
        mousemoveEvent(bF, e) {
            var by = this.isPointInPath(this.getContext(), bF);
            if (by) {
                this.options.methods.mousemove(by, e)
            } else {
                this.options.methods.mousemove(null, e)
            }
        }
        dblclickEvent(bF, e) {
            var by = this.isPointInPath(this.getContext(), bF);
            if (by) {
                this.options.methods.dblclick(by, e)
            } else {
                this.options.methods.dblclick(null, e)
            }
        }
        update(obj, isDraw) {
            var bm = this;
            var bz = obj.options;
            var bA = bm.options;
            for (var i in bz) {
                bA[i] = bz[i]
            }
            bm.init(bA);
            if (isDraw !== false) {
                bm.draw()
            }
        }
        setOptions(bA) {
            var bm = this;
            bm.dataSet.reset();
            bm.init(bA);
            bm.draw()
        }
        set(obj) {
            var bm = this;
            var bB = this.getContext();
            var bC = this.getDefaultContextConfig();
            for (var i in bC) {
                bB[i] = bC[i]
            }
            bm.init(obj.options);
            bm.draw()
        }
        destroy() {
            this.unbindEvent();
            this.hide()
        }
        initAnimator() {
            var bm = this;
            var bu = bm.options.animation;
            if (bm.options.draw == 'time' || bm.isEnabledTime()) {
                if (!bu.stepsRange) {
                    bu.stepsRange = {
                        start: this.dataSet.getMin('time') || 0,
                        end: this.dataSet.getMax('time') || 0
                    }
                }
                this.steps = {
                    step: bu.stepsRange.start
                };
                bm.animator = new bj.Tween(this.steps).onUpdate(function() {
                    bm._canvasUpdate(this.step)
                }).repeat(Infinity);
                var bD = bu.duration * 1000 || 5000;
                bm.animator.to({
                    step: bu.stepsRange.end
                }, bD);
                bm.animator.start()
            }
        }
        addAnimatorEvent() {}
        animatorMovestartEvent() {
            var bu = this.options.animation;
            if (this.isEnabledTime() && this.animator) {
                this.steps.step = bu.stepsRange.start;
                this.animator.stop()
            }
        }
        animatorMoveendEvent() {
            if (this.isEnabledTime() && this.animator) {
                this.animator.start()
            }
        }
    }
    class AnimationLayer extends BaseLayer {
        constructor(bG, dataSet, bA) {
            super(bG, dataSet, bA);
            this.map = bG;
            this.options = bA || {};
            this.dataSet = dataSet;
            var bE = new CanvasLayer({
                map: bG,
                zIndex: this.options.zIndex,
                update: this._canvasUpdate.bind(this)
            });
            this.init(this.options);
            this.canvasLayer = bE;
            this.transferToMercator.bind(this)();
            var bm = this;
            dataSet.on('change', function() {
                bm.transferToMercator.bind(this);
                bE.draw()
            });
            this.ctx = bE.canvas.getContext('2d');
            this.start()
        }
        init(bA) {
            var bm = this;
            bm.options = bA;
            this.initDataRange(bA);
            this.context = bm.options.context || '2d';
            if (bm.options.zIndex) {
                this.canvasLayer && this.canvasLayer.setZIndex(bm.options.zIndex)
            }
            if (bm.options.max) {
                this.intensity.setMax(bm.options.max)
            }
            if (bm.options.min) {
                this.intensity.setMin(bm.options.min)
            }
            this.initAnimator();
            this.bindEvent.bind(this)()
        }
        transferToMercator() {
            if (this.options.coordType !== 'bd09mc') {
                var bx = this.dataSet.get();
                bx = this.dataSet.transferCoordinate(bx, function(a) {
                    var b = this.map.getPixelFromCoordinate(ol.proj.fromLonLat([a[0], a[1]], 'EPSG:3857'));
                    if (null == b) {
                        return [0, 0]
                    } else {
                        return [b[0], b[1]]
                    }
                }.bind(this), 'coordinates', 'coordinates_mercator');
                this.dataSet._set(bx)
            }
        }
        clickEvent(e) {
            var bm = this
            var bF = e.pixel;
            super.clickEvent(bF, e)
        }
        mousemoveEvent(e) {
            var bF = e.pixel;
            super.mousemoveEvent(bF, e)
        }
        getContext() {
            return this.canvasLayer.canvas.getContext(this.context)
        }
        bindEvent(e) {
            this.unbindEvent();
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.on('singleclick', this.clickEvent.bind(this))
                }
                if (this.options.methods.mousemove) {
                    bG.on('pointermove', this.mousemoveEvent)
                }
            }
        }
        unbindEvent(e) {
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.on('singleclick', this.clickEvent)
                }
                if (this.options.methods.mousemove) {
                    bG.on('pointermove', this.mousemoveEvent)
                }
            }
        }
        _canvasUpdate() {
            var bB = this.ctx;
            if (!bB) {
                return
            }
            var bG = this.map;
            var bH = Math.pow(2, 18 - bG.getView().getZoom());
            var bI = this.map.getPixelFromCoordinate(ol.proj.fromLonLat(bG.getView().getCenter(), 'EPSG:3857'));
            var bJ = [bI[0] - (bG.getSize()[0] / 2) * bH, bI[1] + (bG.getSize()[1] / 2) * bH];
            F(bB);
            var bK = {
                fromColumn: 'coordinates',
                transferCoordinate: function(a) {
                    if (!a) {
                        return
                    }
                    var b = this.map.getPixelFromCoordinate(ol.proj.fromLonLat([a[0], a[1]], 'EPSG:3857'));
                    if (null == b) {
                        return [0, 0]
                    } else {
                        return [b[0], b[1]]
                    }
                }.bind(this)
            };
            this.data = this.dataSet.get(bK);
            this.processData(this.data);
            this.drawAnimation()
        }
        drawAnimation() {
            var bB = this.ctx;
            var bx = this.data;
            if (!bx) {
                return
            }
            bB.save();
            bB.globalCompositeOperation = 'destination-out';
            bB.fillStyle = 'rgba(0, 0, 0, .1)';
            bB.fillRect(0, 0, bB.canvas.width, bB.canvas.height);
            bB.restore();
            bB.save();
            if (this.options.shadowColor) {
                bB.shadowColor = this.options.shadowColor
            }
            if (this.options.shadowBlur) {
                bB.shadowBlur = this.options.shadowBlur
            }
            if (this.options.globalAlpha) {
                bB.globalAlpha = this.options.globalAlpha
            }
            if (this.options.globalCompositeOperation) {
                bB.globalCompositeOperation = this.options.globalCompositeOperation
            }
            var bA = this.options;
            for (var i = 0; i < bx.length; i++) {
                if (bx[i].geometry.type === 'Point') {
                    bB.beginPath();
                    var bL = bx[i].size || this.options.size;
                    var bM = bx[i].minSize || this.options.minSize || 0;
                    if (bx[i]._size === undefined) {
                        bx[i]._size = bM
                    }
                    bB.arc(bx[i].geometry._coordinates[0], bx[i].geometry._coordinates[1], bx[i]._size, 0, Math.PI * 2, true);
                    bB.closePath();
                    bx[i]._size++;
                    if (bx[i]._size > bL) {
                        bx[i]._size = bM
                    }
                    bB.lineWidth = 1;
                    bB.strokeStyle = bx[i].strokeStyle || bx[i]._strokeStyle || bA.strokeStyle || 'yellow';
                    bB.stroke();
                    var bN = bx[i].fillStyle || bx[i]._fillStyle || bA.fillStyle;
                    if (bN) {
                        bB.fillStyle = bN;
                        bB.fill()
                    }
                } else if (bx[i].geometry.type === 'LineString') {
                    bB.beginPath();
                    var bO = bx[i].size || this.options.size || 5;
                    var bM = bx[i].minSize || this.options.minSize || 0;
                    if (bx[i]._index === undefined) {
                        bx[i]._index = 0
                    }
                    var bP = bx[i]._index;
                    bB.arc(bx[i].geometry._coordinates[bP][0], bx[i].geometry._coordinates[bP][1], bO, 0, Math.PI * 2, true);
                    bB.closePath();
                    bx[i]._index++;
                    if (bx[i]._index >= bx[i].geometry._coordinates.length) {
                        bx[i]._index = 0
                    }
                    bB.lineWidth = bA.lineWidth || 1;
                    var bQ = bx[i].strokeStyle || bA.strokeStyle;
                    var bN = bx[i].fillStyle || bA.fillStyle || 'yellow';
                    bB.fillStyle = bN;
                    bB.fill();
                    if (bQ) {
                        bB.strokeStyle = bQ;
                        bB.stroke()
                    }
                }
            }
            bB.restore()
        }
        animate() {
            this.drawAnimation();
            var bR = this.options.animateTime || 100;
            this.timeout = setTimeout(this.animate.bind(this), bR)
        }
        start() {
            this.stop();
            this.animate()
        }
        stop() {
            clearTimeout(this.timeout)
        }
        unbindEvent() {}
        hide() {
            this.canvasLayer.hide();
            this.stop()
        }
        show() {
            this.start()
        }
    }
    class Layer extends BaseLayer {
        constructor(bG, dataSet, bA) {
            super(bG, dataSet, bA);
            var bm = this;
            var bx = null;
            bA = bA || {};
            this.clickEvent = this.clickEvent.bind(this);
            this.mousemoveEvent = this.mousemoveEvent.bind(this);
            this.dblclickEvent = this.dblclickEvent.bind(this);
            bm.init(bA);
            bm.argCheck(bA);
            bm.transferToMercator();
            var bE = this.canvasLayer = new CanvasLayer({
                map: bG,
                context: this.context,
                paneName: bA.paneName,
                mixBlendMode: bA.mixBlendMode,
                enableMassClear: bA.enableMassClear,
                zIndex: bA.zIndex,
                update: function() {
                    bm._canvasUpdate()
                }
            });
            dataSet.on('change', function() {
                bm.transferToMercator();
                bE.draw()
            })
        }
        clickEvent(e) {
            var bF = e.pixel;
            super.clickEvent(bF, e)
        }
        mousemoveEvent(e) {
            var bF = e.pixel;
            super.mousemoveEvent(bF, e)
        }
        dblclickEvent(e) {
            var bF = e.pixel;
            super.dblclickEvent(bF, e)
        }

        bindEvent(e) {
            this.unbindEvent();
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.on('singleclick', this.clickEvent)
                }
                if (this.options.methods.mousemove) {
                    bG.on('pointermove', this.mousemoveEvent)
                }
                if (this.options.methods.dblclick) {
                    bG.on('dblclick', this.dblclickEvent)
                }
            }
        }
        unbindEvent(e) {
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.on('singleclick', this.clickEvent)
                }
                if (this.options.methods.mousemove) {
                    bG.on('pointermove', this.mousemoveEvent)
                }
            }
        }
        transferToMercator() {
            if (this.options.coordType !== 'bd09mc') {
                var bx = this.dataSet.get();
                bx = this.dataSet.transferCoordinate(bx, function(a) {
                    var b = window.omap.getPixelFromCoordinate(ol.proj.fromLonLat([a[0], a[1]], 'EPSG:3857'));
                    return [b[0], b[1]]
                }, 'coordinates', 'coordinates_mercator');
                this.dataSet._set(bx)
            }
        }
        getContext() {
            return this.canvasLayer.canvas.getContext(this.context)
        }
        _canvasUpdate(time) {
            if (!this.canvasLayer) {
                return
            }
            var bm = this;
            var bu = bm.options.animation;
            var bG = this.canvasLayer._map;
            var bH = Math.pow(2, 18 - bG.getView().getZoom());
            var bI = window.omap.getPixelFromCoordinate(ol.proj.fromLonLat(bG.getView().getCenter(), 'EPSG:3857'));
            var bJ = [bI[0] - (bG.getSize().width / 2) * bH, bI[1] + (bG.getSize().height / 2) * bH];
            var bw = this.getContext();
            if (bm.isEnabledTime()) {
                if (time === undefined) {
                    F(bw);
                    return
                }
                if (this.context == '2d') {
                    bw.save();
                    bw.globalCompositeOperation = 'destination-out';
                    bw.fillStyle = 'rgba(0, 0, 0, .1)';
                    bw.fillRect(0, 0, bw.canvas.width, bw.canvas.height);
                    bw.restore()
                }
            } else {
                F(bw)
            }
            if (this.context == '2d') {
                for (var bS in bm.options) {
                    bw[bS] = bm.options[bS]
                }
            } else {
                bw.clear(bw.COLOR_BUFFER_BIT)
            }
            if (bm.options.minZoom && bG.getSize().getZoom() < bm.options.minZoom || bm.options.maxZoom && bG.getSize().getZoom() > bm.options.maxZoom) {
                return
            }
            var bT = 1;
            var bK = {
                fromColumn: 'coordinates',
                transferCoordinate: function(a) {
                    var b = window.omap.getPixelFromCoordinate(ol.proj.fromLonLat([a[0], a[1]], 'EPSG:3857'));
                    if (null == b) {
                        return [0, 0]
                    } else {
                        return [b[0], b[1]]
                    }
                }
            };
            if (time !== undefined) {
                bK.filter = function(a) {
                    var b = bu.trails || 10;
                    if (time && a.time > (time - b) && a.time < time) {
                        return true
                    } else {
                        return false
                    }
                }
            }
            var bx = bm.dataSet.get(bK);
            this.processData(bx);
            var bU = [0, 0];
            if (bm.options.unit == 'm') {
                if (bm.options.size) {
                    bm.options._size = bm.options.size / bH
                }
                if (bm.options.width) {
                    bm.options._width = bm.options.width / bH
                }
                if (bm.options.height) {
                    bm.options._height = bm.options.height / bH
                }
            } else {
                bm.options._size = bm.options.size;
                bm.options._height = bm.options.height;
                bm.options._width = bm.options.width
            }
            this.drawContext(bw, bx, bm.options, bU);
            bm.options.updateCallback && bm.options.updateCallback(time)
        }
        init(bA) {
            var bm = this;
            bm.options = bA;
            this.initDataRange(bA);
            this.context = bm.options.context || '2d';
            if (bm.options.zIndex) {
                this.canvasLayer && this.canvasLayer.setZIndex(bm.options.zIndex)
            }
            if (bm.options.max) {
                this.intensity.setMax(bm.options.max)
            }
            if (bm.options.min) {
                this.intensity.setMin(bm.options.min)
            }
            this.initAnimator();
            this.bindEvent()
        }
        addAnimatorEvent() {
            this.map.on('movestart', this.animatorMovestartEvent.bind(this));
            this.map.on('moveend', this.animatorMovestartEvent.bind(this))
        }
        show() {
            this.canvas.style.display = 'block'
        }
        hide() {
            this.canvasLayer.canvas.style.display = 'none'
        }
        bq() {
            this.canvasLayer.draw()
        }
    }
    function CanvasLayer$2(c) {
        this.isAdded_ = false;
        this.isAnimated_ = false;
        this.paneName_ = CanvasLayer$2.DEFAULT_PANE_NAME_;
        this.updateHandler_ = null;
        this.resizeHandler_ = null;
        this.topLeft_ = null;
        this.centerListener_ = null;
        this.resizeListener_ = null;
        this.needsResize_ = true;
        this.requestAnimationFrameId_ = null;
        var d = document.createElement('canvas');
        d.style.position = 'absolute';
        d.style.top = 0;
        d.style.left = 0;
        d.style.pointerEvents = 'none';
        this.canvas = d;
        this.canvasCssWidth_ = 300;
        this.canvasCssHeight_ = 150;
        this.resolutionScale_ = 1;

        function simpleBindShim(a, b) {
            return function() {
                b.apply(a)
            }
        }
        this.repositionFunction_ = simpleBindShim(this, this.repositionCanvas_);
        this.resizeFunction_ = simpleBindShim(this, this.resize_);
        this.requestUpdateFunction_ = simpleBindShim(this, this.update_);
        if (c) {
            this.setOptions(c)
        }
    }
    var bV = typeof window === 'undefined' ? {} : window;
    if (bV.google && bV.google.maps) {
        CanvasLayer$2.prototype = new google.maps.OverlayView();
        CanvasLayer$2.DEFAULT_PANE_NAME_ = 'overlayLayer';
        CanvasLayer$2.CSS_TRANSFORM_ = (function() {
            var a = document.createElement('div');
            var b = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform'];
            for (var i = 0; i < b.length; i++) {
                var c = b[i];
                if (a.style[c] !== undefined) {
                    return c
                }
            }
            return b[0]
        })();
        CanvasLayer$2.prototype.requestAnimFrame_ = bV.requestAnimationFrame || bV.webkitRequestAnimationFrame || bV.mozRequestAnimationFrame || bV.oRequestAnimationFrame || bV.msRequestAnimationFrame ||
            function(a) {
                return bV.setTimeout(a, 1000 / 60)
            };
        CanvasLayer$2.prototype.cancelAnimFrame_ = bV.cancelAnimationFrame || bV.webkitCancelAnimationFrame || bV.mozCancelAnimationFrame || bV.oCancelAnimationFrame || bV.msCancelAnimationFrame ||
            function(a) {};
        CanvasLayer$2.prototype.setOptions = function(a) {
            if (a.animate !== undefined) {
                this.setAnimate(a.animate)
            }
            if (a.paneName !== undefined) {
                this.setPaneName(a.paneName)
            }
            if (a.updateHandler !== undefined) {
                this.setUpdateHandler(a.updateHandler)
            }
            if (a.resizeHandler !== undefined) {
                this.setResizeHandler(a.resizeHandler)
            }
            if (a.resolutionScale !== undefined) {
                this.setResolutionScale(a.resolutionScale)
            }
            if (a.map !== undefined) {
                this.setMap(a.map)
            }
        };
        CanvasLayer$2.prototype.setAnimate = function(a) {
            this.isAnimated_ = !! a;
            if (this.isAnimated_) {
                this.scheduleUpdate()
            }
        };
        CanvasLayer$2.prototype.isAnimated = function() {
            return this.isAnimated_
        };
        CanvasLayer$2.prototype.setPaneName = function(a) {
            this.paneName_ = a;
            this.setPane_()
        };
        CanvasLayer$2.prototype.getPaneName = function() {
            return this.paneName_
        };
        CanvasLayer$2.prototype.setPane_ = function() {
            if (!this.isAdded_) {
                return
            }
            var a = this.getPanes();
            if (!a[this.paneName_]) {
                throw new Error('"' + this.paneName_ + '" is not a valid MapPane name.');
            }
            a[this.paneName_].appendChild(this.canvas)
        };
        CanvasLayer$2.prototype.setResizeHandler = function(a) {
            this.resizeHandler_ = a
        };
        CanvasLayer$2.prototype.setResolutionScale = function(a) {
            if (typeof a === 'number') {
                this.resolutionScale_ = a;
                this.resize_()
            }
        };
        CanvasLayer$2.prototype.setUpdateHandler = function(a) {
            this.updateHandler_ = a
        };
        CanvasLayer$2.prototype.onAdd = function() {
            if (this.isAdded_) {
                return
            }
            this.isAdded_ = true;
            this.setPane_();
            this.resizeListener_ = google.maps.event.addListener(this.getMap(), 'resize', this.resizeFunction_);
            this.centerListener_ = google.maps.event.addListener(this.getMap(), 'center_changed', this.repositionFunction_);
            this.resize_();
            this.repositionCanvas_()
        };
        CanvasLayer$2.prototype.onRemove = function() {
            if (!this.isAdded_) {
                return
            }
            this.isAdded_ = false;
            this.topLeft_ = null;
            this.canvas.parentElement.removeChild(this.canvas);
            if (this.centerListener_) {
                google.maps.event.removeListener(this.centerListener_);
                this.centerListener_ = null
            }
            if (this.resizeListener_) {
                google.maps.event.removeListener(this.resizeListener_);
                this.resizeListener_ = null
            }
            if (this.requestAnimationFrameId_) {
                this.cancelAnimFrame_.call(bV, this.requestAnimationFrameId_);
                this.requestAnimationFrameId_ = null
            }
        };
        CanvasLayer$2.prototype.resize_ = function() {
            if (!this.isAdded_) {
                return
            }
            var a = this.getMap();
            var b = a.getDiv().offsetWidth;
            var c = a.getDiv().offsetHeight;
            var d = b * this.resolutionScale_;
            var e = c * this.resolutionScale_;
            var f = this.canvas.width;
            var g = this.canvas.height;
            if (f !== d || g !== e) {
                this.canvas.width = d;
                this.canvas.height = e;
                this.needsResize_ = true;
                this.scheduleUpdate()
            }
            if (this.canvasCssWidth_ !== b || this.canvasCssHeight_ !== c) {
                this.canvasCssWidth_ = b;
                this.canvasCssHeight_ = c;
                this.canvas.style.width = b + 'px';
                this.canvas.style.height = c + 'px'
            }
        };
        CanvasLayer$2.prototype.draw = function() {
            this.repositionCanvas_()
        };
        CanvasLayer$2.prototype.repositionCanvas_ = function() {
            var a = this.getMap();
            var b = a.getBounds().getNorthEast().lat();
            var c = a.getCenter();
            var d = Math.pow(2, a.getZoom());
            var e = c.lng() - (this.canvasCssWidth_ * 180) / (256 * d);
            this.topLeft_ = new google.maps.LatLng(b, e);
            var f = this.getProjection();
            var g = f.fromLatLngToDivPixel(c);
            var h = -Math.round(this.canvasCssWidth_ / 2 - g.x);
            var i = -Math.round(this.canvasCssHeight_ / 2 - g.y);
            this.canvas.style[CanvasLayer$2.CSS_TRANSFORM_] = 'translate(' + h + 'px,' + i + 'px)';
            this.scheduleUpdate()
        };
        CanvasLayer$2.prototype.update_ = function() {
            this.requestAnimationFrameId_ = null;
            if (!this.isAdded_) {
                return
            }
            if (this.isAnimated_) {
                this.scheduleUpdate()
            }
            if (this.needsResize_ && this.resizeHandler_) {
                this.needsResize_ = false;
                this.resizeHandler_()
            }
            if (this.updateHandler_) {
                this.updateHandler_()
            }
        };
        CanvasLayer$2.prototype.getTopLeft = function() {
            return this.topLeft_
        };
        CanvasLayer$2.prototype.scheduleUpdate = function() {
            if (this.isAdded_ && !this.requestAnimationFrameId_) {
                this.requestAnimationFrameId_ = this.requestAnimFrame_.call(bV, this.requestUpdateFunction_)
            }
        }
    }
    class Layer$2 extends BaseLayer {
        constructor(bG, dataSet, bA) {
            super(bG, dataSet, bA);
            var bm = this;
            var bx = null;
            bA = bA || {};
            bm.init(bA);
            bm.argCheck(bA);
            var bW = {
                map: bG,
                animate: false,
                updateHandler: function() {
                    bm._canvasUpdate()
                },
                resolutionScale: resolutionScale
            };
            var bE = this.canvasLayer = new CanvasLayer$2(bW);
            this.clickEvent = this.clickEvent.bind(this);
            this.mousemoveEvent = this.mousemoveEvent.bind(this);
            this.bindEvent()
        }
        clickEvent(e) {
            var bF = e.pixel;
            super.clickEvent(bF, e)
        }
        mousemoveEvent(e) {
            var bF = e.pixel;
            super.mousemoveEvent(bF, e)
        }
        bindEvent(e) {
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.setDefaultCursor("default");
                    bG.on('singleclick', this.clickEvent)
                }
                if (this.options.methods.mousemove) {
                    bG.on('pointermove', this.clickEvent)
                }
            }
        }
        unbindEvent(e) {
            var bG = this.map;
            if (this.options.methods) {
                if (this.options.methods.click) {
                    bG.removeListener('singleclick', this.clickEvent)
                }
                if (this.options.methods.mousemove) {
                    bG.removeListener('pointermove', this.mousemoveEvent)
                }
            }
        }
        getContext() {
            return this.canvasLayer.canvas.getContext(this.context)
        }
        _canvasUpdate(time) {
            if (!this.canvasLayer) {
                return
            }
            var bm = this;
            var bu = bm.options.animation;
            var bw = this.getContext();
            if (bm.isEnabledTime()) {
                if (time === undefined) {
                    F(bw);
                    return
                }
                if (this.context == '2d') {
                    bw.save();
                    bw.globalCompositeOperation = 'destination-out';
                    bw.fillStyle = 'rgba(0, 0, 0, .1)';
                    bw.fillRect(0, 0, bw.canvas.width, bw.canvas.height);
                    bw.restore()
                }
            } else {
                F(bw)
            }
            if (this.context == '2d') {
                for (var bS in bm.options) {
                    bw[bS] = bm.options[bS]
                }
            } else {
                bw.clear(bw.COLOR_BUFFER_BIT)
            }
            if (bm.options.minZoom && bG.getZoom() < bm.options.minZoom || bm.options.maxZoom && bG.getZoom() > bm.options.maxZoom) {
                return
            }
            var bT = 1;
            var bG = this.map;
            var bT = Math.pow(2, bG.getVieew().getZoom()) * resolutionScale;
            var bX = mapProjection.fromLatLngToPoint(this.canvasLayer.getTopLeft());
            var bK = {
                transferCoordinate: function(a) {
                    var b = new google.maps.LatLng(a[1], a[0]);
                    var c = mapProjection.fromLatLngToPoint(b);
                    var d = {
                        x: (c.x - bX.x) * bT,
                        y: (c.y - bX.y) * bT,
                    };
                    return [d.x, d.y]
                }
            };
            if (time !== undefined) {
                bK.filter = function(a) {
                    var b = bu.trails || 10;
                    if (time && a.time > (time - b) && a.time < time) {
                        return true
                    } else {
                        return false
                    }
                }
            }
            var bx = bm.dataSet.get(bK);
            this.processData(bx);
            var bY = new google.maps.LatLng(0, 0);
            var bZ = mapProjection.fromLatLngToPoint(bY);
            var bF = {
                x: (bZ.x - bX.x) * bT,
                y: (bZ.y - bX.y) * bT,
            };
            if (bm.options.unit == 'm' && bm.options.size) {
                bm.options._size = bm.options.size / bH
            } else {
                bm.options._size = bm.options.size
            }
            this.drawContext(bw, new DataSet(bx), bm.options, bF);
            bm.options.updateCallback && bm.options.updateCallback(time)
        }
        init(bA) {
            var bm = this;
            bm.options = bA;
            this.initDataRange(bA);
            this.context = bm.options.context || '2d';
            if (bm.options.zIndex) {
                this.canvasLayer && this.canvasLayer.setZIndex(bm.options.zIndex)
            }
            this.initAnimator()
        }
        addAnimatorEvent() {
            this.map.addListener('movestart', this.animatorMovestartEvent.bind(this));
            this.map.addListener('moveend', this.animatorMoveendEvent.bind(this))
        }
        show() {
            this.map.addOverlay(this.canvasLayer)
        }
        hide() {
            this.map.removeOverlay(this.canvasLayer)
        }
        bq() {
            bm.canvasLayer.draw()
        }
    }
    var ca = {
        getDataSet: function(a) {
            var b = [];
            var c = a.features;
            for (var i = 0; i < c.length; i++) {
                var d = c[i];
                var e = d.geometry;
                var f = d.properties;
                var g = {};
                for (var h in f) {
                    g[h] = f[h]
                }
                g.geometry = e;
                b.push(g)
            }
            return new DataSet(b)
        }
    };
    var cb = {
        CSVToArray: function(a, b) {
            b = (b || ",");
            var c = new RegExp(("(\\" + b + "|\\r?\\n|\\r|^)" + "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + "([^\"\\" + b + "\\r\\n]*))"), "gi");
            var d = [
                []
            ];
            var e = null;
            while (e = c.exec(a)) {
                var f = e[1];
                if (f.length && f !== b) {
                    d.push([])
                }
                var g;
                if (e[2]) {
                    g = e[2].replace(new RegExp("\"\"", "g"), "\"")
                } else {
                    g = e[3]
                }
                d[d.length - 1].push(g)
            }
            return (d)
        },
        getDataSet: function(a, b) {
            var c = this.CSVToArray(a, b || ',');
            var d = [];
            var e = c[0];
            for (var i = 1; i < c.length - 1; i++) {
                var f = c[i];
                var g = {};
                for (var j = 0; j < f.length; j++) {
                    var h = f[j];
                    if (e[j] == 'geometry') {
                        h = JSON.parse(h)
                    }
                    g[e[j]] = h
                }
                d.push(g)
            }
            return new DataSet(d)
        }
    };
    D.version = E;
    D.canvasClear = F;
    D.canvasResolutionScale = G;
    D.canvasDrawSimple = N;
    D.canvasDrawHeatmap = T;
    D.canvasDrawGrid = U;
    D.canvasDrawHoneycomb = V;
    D.webglDrawSimple = bf;
    D.webglDrawPoint = bb;
    D.webglDrawLine = Y;
    D.webglDrawPolygon = be;
    D.utilCityCenter = J;
    D.utilCurve = bg;
    D.utilForceEdgeBundling = bh;
    D.utilDataRangeIntensity = Intensity;
    D.utilDataRangeCategory = Category;
    D.utilDataRangeChoropleth = Choropleth;
    D.baiduMapCanvasLayer = CanvasLayer;
    D.baiduMapAnimationLayer = AnimationLayer;
    D.baiduMapLayer = Layer;
    D.googleMapCanvasLayer = CanvasLayer$2;
    D.googleMapLayer = Layer$2;
    D.DataSet = DataSet;
    D.geojson = ca;
    D.csv = cb;
    Object.defineProperty(D, '__esModule', {
        value: true
    })
})));